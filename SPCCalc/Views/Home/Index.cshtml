@{
    ViewBag.Title = "SPC Calculator Page";
}
<!DOCTYPE html>
<html>
<head>
    <title>@ViewBag.Title - Production SPC Calculator</title>
    <link href="@Url.Content("~/Content/bootstrap.min.css")" rel="stylesheet" type="text/css" />

    <link href="@Url.Content("~/Content/font-awesome.css")" rel="stylesheet" type="text/css" />
    <style>
            #tab1SpcWbSohed li.k-item.k-state-default.k-tab-on-top.k-state-active {
                border-color: #3384ff !important;
            }

            #tab1SpcWbGts li.k-item.k-state-default.k-tab-on-top.k-state-active {
                border-color: #3384ff !important;
            }

            #tab1SpcWbSensor li.k-item.k-state-default.k-tab-on-top.k-state-active {
                border-color: #3384ff !important;
            }

            #tab1SpcWbSL li.k-item.k-state-default.k-tab-on-top.k-state-active {
                border-color: #3384ff !important;
            }

            .spinner {
                position: fixed;
                top: 50%;
                left: 62%;
                margin-left: -62px; /* half width of the spinner gif */
                margin-top: -50px; /* half height of the spinner gif */
                text-align: center;
                z-index: 1234;
                overflow: auto;
                width: 100px; /* width of the spinner gif */
                height: 102px; /*hight of the spinner gif +2px to fix IE8 issue */
            }

            .k-grid td {
                padding-left: 0.3em;
                padding-right: 0.3em;
                padding-top: 0;
                padding-bottom: 0;
            }

            .k-grid .k-grid-header .k-header .k-link {
                height: auto;
            }

            .k-grid .k-grid-header .k-header {
                white-space: normal;
            }

            .responsive-container {
                position: relative;
                width: 100%;
                height: 100%;
                border: 0px solid black;
                overflow: hidden;
            }

            .dummy {
                padding-top: 100%; /* forces 1:1 aspect ratio */
            }

            .img-container {
                position: absolute;
                top: 0;
                bottom: 0;
                left: 0;
                right: 0;
                text-align: center; /* Align center inline elements */
                font: 0/0 a;
            }

                .img-container .centerer {
                    display: inline-block;
                    vertical-align: middle;
                    height: 100%;
                }

                .img-container img {
                    vertical-align: middle;
                    display: inline-block;
                    max-height: 100%; /* <-- Set maximum height to 100% of its parent */
                    max-width: 100%; /* <-- Set maximum width to 100% of its parent */
                }


            .mainpage {
                overflow: hidden;
                padding-top: 12px;
                padding-left: 8px;
                padding-bottom: 0px;
                padding-right: 8px;
                border: 0px solid;
            }

            /* Display Font Awsome Icons and Fonts in treeview */
            .fa.k-sprite,
            .fa.k-sprite::before {
                font-size: 14px;
                line-height: 14px;
                vertical-align: middle;
            }


            .k-header h1 {
                margin: 0;
                padding: 30px 15px;
                font-size: 32px;
                font-weight: lighter;
            }

            /* Sticky footer styles
        -------------------------------------------------- */
            html {
                position: relative;
                min-height: 100%;
            }

            .footer {
                position: absolute;
                bottom: 0;
                width: 100%;
                /* Set the fixed height of the footer here */
                height: 60px;
                background-color: #f5f5f5;
            }

            .container-fluid .text-muted {
                margin: 20px 0;
            }

            .placeholders {
                margin: 30px auto;
            }

            .placeholder img {
                display: inline-block;
            }

            p .k-button {
                margin: 0 15px 0 0;
            }

            .btn-toggle {
                position: absolute;
                top: 0;
                left: 0;
                box-shadow: none;
                height: 48px;
            }

                .btn-toggle .k-icon {
                    opacity: 1;
                }

                .btn-toggle,
                .k-primary.btn-toggle:hover,
                .btn-toggle:focus:active:not(.k-state-disabled):not([disabled]),
                .btn-toggle:focus:not(.k-state-disabled):not([disabled]) {
                    box-shadow: none;
                    border-radius: 0;
                }

                    .btn-toggle .k-i-hbars,
                    .k-primary.btn-toggle:hover .k-i-hbars,
                    .btn-toggle:focus:active:not(.k-state-disabled):not([disabled]) .k-i-hbars,
                    .btn-toggle:focus:not(.k-state-disabled):not([disabled]) .k-i-hbars {
                        background-position: -80px -32px;
                    }

            @@media (max-width: 768px) {
                .k-item {
                    display: block;
                    clear: both;
                    float: none;
                    width: 100%;
                }

                .k-header h1 {
                    margin: 0;
                    padding: 16px 15px 14px 60px;
                    font-size: 18px;
                    font-weight: lighter;
                }
            }

            .table th, .table td {
                border-top: none !important;
            }
    </style>
    <script type="text/javascript">
        function additionalInfo() {
            return {

                //MoldGts
                strLotNo: $("#strLotNo").val(),
                strMachine: $("#equipList").data("kendoDropDownList").text(),
                strEmployee: $("#empName").val(),

                //MoldGts2
                strLotNoGts2: $("#strLotNoGts2").val(),
                strMachineGts2: $("#equipListGts2").data("kendoDropDownList").text(),
                strEmployeeGts2: $("#empNameGts2").val(),

                //MoldSensorUAMatrix
                strLotNoUA: $("#strLotNoUA").val(),
                strMachineUA: $("#equipListUA").data("kendoDropDownList").text(),
                strEmployeeUA: $("#empNameUA").val(),

                //MoldSensorKMatrix
                strLotNoTOKTKN: $("#strLotNoTOKTKN").val(),
                strMachineTOKTKN: $("#equipListTOKTKN").data("kendoDropDownList").text(),
                strEmployeeTOKTKN: $("#empNameTOKTKN").val(),

                //MoldCurrentSensor
                strLotNoCS: $("#strLotNoCS").val(),
                strMachineCS: $("#equipListCS").data("kendoDropDownList").text(),
                strEmployeeCS: $("#empNameCS").val(),

                //MoldSohed
                strLotNoSohed: $("#strLotNoSohed").val(),
                strMachineSohed: $("#equipListSohed").data("kendoDropDownList").text(),
                strEmployeeSohed: $("#empNameSohed").val(),

                //WirebondSohedBs
                strLotNoSohedBs: $("#strLotNoSohedBs").val(),
                strMachineSohedBs: $("#equipListSohedBs").data("kendoDropDownList").text(),
                strEmployeeSohedBs: $("#empNameSohedBs").val(),

                //WirebondSohedBsPbo
                strLotNoSohedBsPbo: $("#strLotNoSohedBsPbo").val(),
                strMachineSohedBsPbo: $("#equipListSohedBsPbo").data("kendoDropDownList").text(),
                strEmployeeSohedBsPbo: $("#empNameSohedBsPbo").val(),

                //WirebondSohedWp
                strLotNoSohedWp: $("#strLotNoSohedWp").val(),
                strMachineSohedWp: $("#equipListSohedWp").data("kendoDropDownList").text(),
                strEmployeeSohedWp: $("#empNameSohedWp").val(),

                //WirebondSohedWpPbo
                //                strLotNoSohedWpPbo: $("#strLotNoSohedWpPbo").val(),
                //                strMachineSohedWpPbo: $("#equipListSohedWpPbo").data("kendoDropDownList").text(),
                //                strEmployeeSohedWpPbo: $("#empNameSohedWpPbo").val(),

                //WirebondGtsBs
                strLotNoWbGtsBs: $("#strLotNoWbGtsBs").val(),
                strMachineWbGtsBs: $("#equipListWbGtsBs").data("kendoDropDownList").text(),
                strEmployeeWbGtsBs: $("#empNameWbGtsBs").val(),

                //WirebondGtsBsPbo
                strLotNoWbGtsBsPbo: $("#strLotNoWbGtsBsPbo").val(),
                strMachineWbGtsBsPbo: $("#equipListWbGtsBsPbo").data("kendoDropDownList").text(),
                strEmployeeWbGtsBsPbo: $("#empNameWbGtsBsPbo").val(),

                //WirebondGtsWp
                strLotNoWbGtsWp: $("#strLotNoWbGtsWp").val(),
                strMachineWbGtsWp: $("#equipListWbGtsWp").data("kendoDropDownList").text(),
                strEmployeeWbGtsWp: $("#empNameWbGtsWp").val(),

                //WirebondGtsWpPbo
                //                strLotNoWbGtsWpPbo: $("#strLotNoWbGtsWpPbo").val(),
                //                strMachineWbGtsWpPbo: $("#equipListWbGtsWpPbo").data("kendoDropDownList").text(),
                //                strEmployeeWbGtsWpPbo: $("#empNameWbGtsWpPbo").val(),

                //WirebondSensorBs
                strLotNoWbSensorBs: $("#strLotNoWbSensorBs").val(),
                strMachineWbSensorBs: $("#equipListWbSensorBs").data("kendoDropDownList").text(),
                strEmployeeWbSensorBs: $("#empNameWbSensorBs").val(),

                //WirebondSensorBsPbo
                strLotNoWbSensorBsPbo: $("#strLotNoWbSensorBsPbo").val(),
                strMachineWbSensorBsPbo: $("#equipListWbSensorBsPbo").data("kendoDropDownList").text(),
                strEmployeeWbSensorBsPbo: $("#empNameWbSensorBsPbo").val(),

                //WirebondSensorWp
                strLotNoWbSensorWp: $("#strLotNoWbSensorWp").val(),
                strMachineWbSensorWp: $("#equipListWbSensorWp").data("kendoDropDownList").text(),
                strEmployeeWbSensorWp: $("#empNameWbSensorWp").val(),

                //WirebondSLBs
                strLotNoWbSLBs: $("#strLotNoWbSLBs").val(),
                strMachineWbSLBs: $("#equipListWbSLBs").data("kendoDropDownList").text(),
                strEmployeeWbSLBs: $("#empNameWbSLBs").val(),

                //WirebondSLWp
                strLotNoWbSLWp: $("#strLotNoWbSLWp").val(),
                strMachineWbSLWp: $("#equipListWbSLWp").data("kendoDropDownList").text(),
                strEmployeeWbSLWp: $("#empNameWbSLWp").val()

            }
        }

        function formatDate(date, format, utc) {
            var MMMM = ["\x00", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            var MMM = ["\x01", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var dddd = ["\x02", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var ddd = ["\x03", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
            function ii(i, len) { var s = i + ""; len = len || 2; while (s.length < len) s = "0" + s; return s; }

            var y = utc ? date.getUTCFullYear() : date.getFullYear();
            format = format.replace(/(^|[^\\])yyyy+/g, "$1" + y);
            format = format.replace(/(^|[^\\])yy/g, "$1" + y.toString().substr(2, 2));
            format = format.replace(/(^|[^\\])y/g, "$1" + y);

            var M = (utc ? date.getUTCMonth() : date.getMonth()) + 1;
            format = format.replace(/(^|[^\\])MMMM+/g, "$1" + MMMM[0]);
            format = format.replace(/(^|[^\\])MMM/g, "$1" + MMM[0]);
            format = format.replace(/(^|[^\\])MM/g, "$1" + ii(M));
            format = format.replace(/(^|[^\\])M/g, "$1" + M);

            var d = utc ? date.getUTCDate() : date.getDate();
            format = format.replace(/(^|[^\\])dddd+/g, "$1" + dddd[0]);
            format = format.replace(/(^|[^\\])ddd/g, "$1" + ddd[0]);
            format = format.replace(/(^|[^\\])dd/g, "$1" + ii(d));
            format = format.replace(/(^|[^\\])d/g, "$1" + d);

            var H = utc ? date.getUTCHours() : date.getHours();
            format = format.replace(/(^|[^\\])HH+/g, "$1" + ii(H));
            format = format.replace(/(^|[^\\])H/g, "$1" + H);

            var h = H > 12 ? H - 12 : H == 0 ? 12 : H;
            format = format.replace(/(^|[^\\])hh+/g, "$1" + ii(h));
            format = format.replace(/(^|[^\\])h/g, "$1" + h);

            var m = utc ? date.getUTCMinutes() : date.getMinutes();
            format = format.replace(/(^|[^\\])mm+/g, "$1" + ii(m));
            format = format.replace(/(^|[^\\])m/g, "$1" + m);

            var s = utc ? date.getUTCSeconds() : date.getSeconds();
            format = format.replace(/(^|[^\\])ss+/g, "$1" + ii(s));
            format = format.replace(/(^|[^\\])s/g, "$1" + s);

            var f = utc ? date.getUTCMilliseconds() : date.getMilliseconds();
            format = format.replace(/(^|[^\\])fff+/g, "$1" + ii(f, 3));
            f = Math.round(f / 10);
            format = format.replace(/(^|[^\\])ff/g, "$1" + ii(f));
            f = Math.round(f / 10);
            format = format.replace(/(^|[^\\])f/g, "$1" + f);

            var T = H < 12 ? "AM" : "PM";
            format = format.replace(/(^|[^\\])TT+/g, "$1" + T);
            format = format.replace(/(^|[^\\])T/g, "$1" + T.charAt(0));

            var t = T.toLowerCase();
            format = format.replace(/(^|[^\\])tt+/g, "$1" + t);
            format = format.replace(/(^|[^\\])t/g, "$1" + t.charAt(0));

            var tz = -date.getTimezoneOffset();
            var K = utc || !tz ? "Z" : tz > 0 ? "+" : "-";
            if (!utc) {
                tz = Math.abs(tz);
                var tzHrs = Math.floor(tz / 60);
                var tzMin = tz % 60;
                K += ii(tzHrs) + ":" + ii(tzMin);
            }
            format = format.replace(/(^|[^\\])K/g, "$1" + K);

            var day = (utc ? date.getUTCDay() : date.getDay()) + 1;
            format = format.replace(new RegExp(dddd[0], "g"), dddd[day]);
            format = format.replace(new RegExp(ddd[0], "g"), ddd[day]);

            format = format.replace(new RegExp(MMMM[0], "g"), MMMM[M]);
            format = format.replace(new RegExp(MMM[0], "g"), MMM[M]);

            format = format.replace(/\\(.)/g, "$1");

            return format;
        };

    </script>
    <link href="@Url.Content("~/Content/kendo/2015.3.930/kendo.common.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2015.3.930/kendo.mobile.all.min.css")" rel="stylesheet" type="text/css" />
    <link href="@Url.Content("~/Content/kendo/2015.3.930/kendo.dataviz.min.css")" rel="stylesheet" type="text/css" />
    <link id="themeFile" href="@Url.Content("~/Content/kendo/2015.3.930/kendo.silver.min.css")" rel="stylesheet" type="text/css" />
    <script src="@Url.Content("~/Scripts/kendo/2015.3.930/jquery.min.js")"></script>
    <script src="@Url.Content("~/Scripts/bootstrap.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/kendo/2015.3.930/jszip.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2015.3.930/kendo.all.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo/2015.3.930/kendo.aspnetmvc.min.js")"></script>
    <script src="@Url.Content("~/Scripts/kendo.modernizr.custom.js")"></script>
    <!-- Start Kendo Console window script -->
    <script src="@Url.Content("~/Scripts/console.js")"></script>
    <style type="text/css">
        .console div {
            background-image: url("sprite.png");
            background-repeat: no-repeat;
            background-color: transparent;
        }

        * html .console div {
            background-image: url("sprite_ie6.png");
        }

        .console {
            background-color: #FFF;
            border: 1px solid #CCC;
            color: #333;
            font: 11px Consolas, Monaco, "Bitstream Vera Sans Mono", "Courier New", Courier, monospace;
            height: 200px;
            margin: 1.4em 0 0;
            overflow-x: hidden;
            overflow-y: scroll;
            text-align: left;
        }

            .console .count {
                background-color: #91AFEF;
                -moz-border-radius: 15px;
                -webkit-border-radius: 15px;
                border-radius: 15px;
                color: #FFFFFF;
                font-size: 10px;
                margin-left: 5px;
                padding: 2px 6px 2px 5px;
            }

            .console div {
                background-position: 6px -95px;
                border-bottom: 1px solid #DDD;
                padding: 5px 5px 4px 24px;
            }

            .console .error {
                background-position: 6px -135px;
            }

        .k-window-titlebar {
            height: 20px !important;
            color: white !important;
            font-size: 15pt !important;
            background: red !important;
            font-family: Gothic Century;
        }

        .modal {
        }

        .vertical-alignment-helper {
            display: table;
            height: 100%;
            width: 100%;
        }

        .vertical-align-center {
            /* To center vertically */
            display: table-cell;
            vertical-align: middle;
        }

        .modal-content {
            /* Bootstrap sets the size of the modal in the modal-dialog class, we need to inherit it */
            width: inherit;
            height: inherit; /* To center horizontally */
            margin: 0 auto;
        }
    </style>
    <!-- End Kendo Console window script -->
</head>
<body>
    <div class="modal fade bs-example-modal-sm" id="modalUpdateSuccess" tabindex="-1"
         role="dialog" data-backdrop="static">
        <div class="vertical-alignment-helper">
            <div class="modal-dialog modal-sm vertical-align-center">
                <div class="modal-content">
                    <div class="modal-header">
                        <i class="fa fa-info-circle fa-2x">&nbsp; Success</i>
                    </div>
                    <div class="modal-body">
                        <p style="text-align: center">
                            Successfully Saved into the Database
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">
                            Ok
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade bs-example-modal-sm" id="modalNotExist" tabindex="-1" role="dialog"
         data-backdrop="static">
        <div class="vertical-alignment-helper">
            <div class="modal-dialog modal-sm vertical-align-center">
                <div class="modal-content">
                    <div class="modal-header">
                        <i class="fa fa-info-circle fa-2x">&nbsp; Not Found</i>
                    </div>
                    <div class="modal-body">
                        <p style="text-align: center">
                            Lot number not exist!
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">
                            Ok
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade bs-example-modal-sm" id="modalEmptyLot" tabindex="-1" role="dialog"
         data-backdrop="static">
        <div class="vertical-alignment-helper">
            <div class="modal-dialog modal-sm vertical-align-center">
                <div class="modal-content">
                    <div class="modal-header">
                        <i class="fa fa-info-circle fa-2x">&nbsp; Error</i>
                    </div>
                    <div class="modal-body">
                        <p style="text-align: center">
                            Please enter lot number.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">
                            Ok
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid" id="win" style="display: none;">
        <textarea id="txtData" cols="35" rows="60" readonly="readonly" style="font-family: 'Courier New', Courier, monospace;
            font-size: small; font-weight: bold"></textarea>
        @*  @Html.TextArea("name", (string)ViewBag.TextareaHtml)*@
    </div>
    <input type="hidden" value='@ViewData["computerName"]' id="compName" />
    <div id="spinner" class="spinner" style="display: none;">
        <img id="img-spinner" src="../../Images/ajax-loading.gif" alt="Loading" />
    </div>
    <nav class="top-bar bottomnav" data-topbar>
        <section class="top-bar-section">
            <div style="padding-top: 8px; padding-left: 8px; padding-bottom: 3px; padding-right: 8px;">
                @(Html.Kendo().Menu()
                            .Name("Menu")
                            .Items(items =>
                            {
                                items.Add().Text("<label id='fullpath' style='color: black'></label>")
                                    .Encoded(false)
                                    .Enabled(false);

                                items.Add().Text("<label id='computerName' style='color: black'></label>")
                                    .Encoded(false)
                                    .Enabled(false)
                                    .HtmlAttributes(new { style = "float: right;" })
                                    ;
                            })
                )
            </div>
        </section>
    </nav>
    <div id="element_to_pop_up" style="display: none">
    </div>
    <!-- Splitter -->
    <div name="mainDiv" id="mainDiv" class="mainpage">
        @(Html.Kendo().Splitter()
                                    .Name("mainSplitter")
                                    .Orientation(SplitterOrientation.Vertical)
                                    .Panes(verticalPanes =>
                                    {
                                        verticalPanes.Add()
                                        .HtmlAttributes(new { id = "top-pane" })
                                        .Scrollable(false)
                                        .Collapsible(false)
                                        .Content(
                                            Html.Kendo().Splitter()
                                            .Name("horizontal")
                                            .HtmlAttributes(new { style = "height: 100%;" })
                                            .Panes(horizontalPanes =>
                                            {
                                            horizontalPanes.Add()
                                        .HtmlAttributes(new { id = "left-pane" })
                                        .MaxSize("300px")
                                        .MinSize("250px")
                                        .Size("300px")
                                        .Collapsible(true)
                                        .Content("<div style='padding-top: 8px; padding-left: 8px; padding-bottom: 8px; padding-right: 8px;'>" +

                                            Html.Kendo().TreeView()
                                            .Name("treeviewMenu")
                                            .Events(events => events
                                                .Select("onTreeviewMenuSelect")
                                                .Change("onTreeviewMenuChange")
                                                .Collapse("onTreeviewMenuCollapse")
                                                .Expand("onTreeviewMenuExpand"))
                                            .Items(treeview =>
                                            {
                                                treeview.Add().Text("AMPI SPC Calculator")
                                                    .Id(System.Guid.NewGuid().ToString())
                                                    .SpriteCssClasses("fa fa-flag")
                                                    .Expanded(false)
                                                    .Selected(true)
                                                    .Items(root =>
                                                    {
                                                        root.Add().Text("Mold")
                                                            .Id(System.Guid.NewGuid().ToString())
                                                            .SpriteCssClasses("fa fa-bars fa-lg")
                                                            .Expanded(false)
                                                            .Items(mold =>
                                                            {

                                                                mold.Add().Text("GTS")
                                                                    .Id(System.Guid.NewGuid().ToString())
                                                                    .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                    .Expanded(false);

                                                                mold.Add().Text("GTS2")
                                                                    .Id(System.Guid.NewGuid().ToString())
                                                                    .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                    .Expanded(false);

                                                                mold.Add().Text("UA Matrix")
                                                                  .Id(System.Guid.NewGuid().ToString())
                                                                  .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                  .Expanded(false);

                                                                mold.Add().Text("K-Matrix TOK/KB/KC/KN")
                                                                  .Id(System.Guid.NewGuid().ToString())
                                                                  .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                  .Expanded(false);

                                                                mold.Add().Text("K-Matrix KE & KF & KT")
                                                                  .Id(System.Guid.NewGuid().ToString())
                                                                  .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                  .Expanded(false)
                                                                  .Visible(false);

                                                                mold.Add().Text("Current Sensor")
                                                                  .Id(System.Guid.NewGuid().ToString())
                                                                  .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                  .Expanded(false);

                                                                mold.Add().Text("SOHED")
                                                                  .Id(System.Guid.NewGuid().ToString())
                                                                  .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                  .Expanded(false);

                                                            /*
                                                             * @modified by     :   Dev AC (aabasolo@ALLEGROMICRO.com)
                                                             * @date            :   6-14-2016 2:40PM
                                                             * @modifications   :   additional features
                                                             */
                                                                mold.Add().Text("SENSOR (KE_KT_UA-SIP_KA)")
                                                                  .Id(System.Guid.NewGuid().ToString())
                                                                  .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                  .Expanded(false);

                                                                mold.Add().Text("LL")
                                                                  .Id(System.Guid.NewGuid().ToString())
                                                                  .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                  .Expanded(false);

                                                                mold.Add().Text("100%Monitoring_EPIN_Only")
                                                                  .Id(System.Guid.NewGuid().ToString())
                                                                  .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                  .Expanded(false);

                                                            });

                                                        root.Add().Text("Wirebond")
                                                            .Id(System.Guid.NewGuid().ToString())
                                                            .SpriteCssClasses("fa fa-bars fa-lg")
                                                            .Expanded(false)
                                                            .Items(wb =>
                                                            {
                                                                wb.Add().Text("GTS")
                                                                    .Id(System.Guid.NewGuid().ToString())
                                                                    .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                    .Expanded(false);

                                                                wb.Add().Text("SOHED")
                                                                    .Id(System.Guid.NewGuid().ToString())
                                                                    .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                    .Expanded(false);

                                                                wb.Add().Text("SENSOR")
                                                                   .Id(System.Guid.NewGuid().ToString())
                                                                   .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                   .Expanded(false);

                                                                wb.Add().Text("SL")
                                                                   .Id(System.Guid.NewGuid().ToString())
                                                                   .SpriteCssClasses("fa fa-calculator fa-lg")
                                                                   .Expanded(false);


                                                            });

                                                    //sept 07, 2016
                                                    //commented the following line for production
                                                    //root.Add().Text("Die Attach")
                                                    //    .Id(System.Guid.NewGuid().ToString())
                                                    //    .SpriteCssClasses("fa fa-bars fa-lg")
                                                    //    .Expanded(false)
                                                    //    .Items(wb =>
                                                    //{
                                                    //    wb.Add().Text("Bondline")
                                                    //        .Id(System.Guid.NewGuid().ToString())
                                                    //        .SpriteCssClasses("fa fa-calculator fa-lg")
                                                    //        .Expanded(false);
                                                    //});
                                                });

                                            }).ToHtmlString() + "</div>"

                                        );

                                        // RenderBody Splitter
                                        horizontalPanes.Add()
                                            .HtmlAttributes(new { id = "right-pane" })
                                            .Content(@<div id="renderBodyDiv" class="renderbodydiv" style="padding-top: 8px;
                                padding-left: 8px; padding-bottom: 8px; padding-right: 8px; overflow: hidden;">
                                    <div id="welcomeNote" class="responsive-container">
                                        <div class="dummy">
                                        </div>
                                        <div class="img-container">
                                            <div class="center">
                                            </div>
                                            <img src="~/Images/logoSPC.png" style="border: 0px solid;" />
                                        </div>
                                    </div>
                                    <!--
                                    tab for SENSOR(KE_KT_UA-SIP_KA)
                                    -->
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab_sensor_kektsipka")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>SENSOR(KE_KT_UA-SIP_KA) Mold</strong>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6' style='overflow:hidden;'>" +

                                                "<table class='table' style='border:1px solid black; height:100%; width:100%'>" +
                                                    "<tr>" +
                                                        "<td style='width: 30%; font-family: Tahoma; font-weight: bold'><label for='srtLotNo' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 30%, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("txtLotNbr_sensor_kektsipka")
                                                                .HtmlAttributes(new { id = "txtLotNbr_sensor_kektsipka", placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })
                                                                .ToHtmlString() + "</td>" +
                                                        "<td  rowspan='5' style='width: 40%; font-family: Tahoma; font-weight: bold; height:100%;' data-category='sensor_kektsipka'>" +
                                                            Html.Kendo().Button()
                                                                .Name("cmd_load_sensor_kektsipka")
                                                                .HtmlAttributes(new { id = "cmd_load_sensor_kektsipka", type = "button", @class = "k-primary cmdLoader", style = "width: 100%; min-height:100%" })
                                                                //.Events(events => events.Click("_load.grid('sensor_kektsipka')"))
                                                                .Content("Load")

                                                                .ToHtmlString() + "</td>" + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +

                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("cmb_machine_sensor_kektsipka")
                                                                  .HtmlAttributes(new { id = "cmbMachine_sensor_kektsipka", style = "width: 100%" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("MachineListSensorKEKTSIPKA", "Home");
                                                                      });
                                                                  }).ToHtmlString() + "</td>" + "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("txtOperator_sensor_kektsipka")
                                                                    .HtmlAttributes(new { id = "txtOperator_sensor_kektsipka", placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })

                                                                    .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Frame Position" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("txtFramePos_sensor_kektsipka")
                                                                    .HtmlAttributes(new { id = "txtFramePos_sensor_kektsipka", placeholder = "Frame Position", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })

                                                                    .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Package Group" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'><div class='k-cmb' id='cmbPackageGroup_sensor_kektsipka' style='width:100%;'></div><tr>" +
                                               "</table>"
                                                + "</div><div class='col-md-4'><label id='lblLogs_sensor_kektsipka'></label></div></div>" + "<br />" +
                                                "<div id='grid_sensor_kektsipka'></div>"

                                                  ); // End of GTS Mold Tab

                                    }) // End of Items
                                    )


                                    <!--
                                    tab for LL
                                    -->
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab_ll")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>LL Mold</strong>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%; width:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 30%; font-family: Tahoma; font-weight: bold'><label for='srtLotNo' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 30%, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("txtLotNbr_ll")
                                                                .HtmlAttributes(new { id = "txtLotNbr_ll", placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })
                                                                .ToHtmlString() + "</td>" +
                                                        "<td rowspan='5' style='width: 40%; font-family: Tahoma; font-weight: bold; height:100%;' data-category='ll'>" +
                                                            Html.Kendo().Button()
                                                                .Name("cmd_load_ll")
                                                                .HtmlAttributes(new { id = "cmd_load_ll", type = "button", @class = "k-primary cmdLoader", style = "width: 100%; min-height:100%" })
                                                                //.Events(events => events.Click("onClick"))
                                                                .Content("Load")
                                                                .ToHtmlString() + "</td>" + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("cmb_machine_ll")
                                                                  .HtmlAttributes(new { id = "cmbMachine_ll", style = "width: 100%" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("MachineListSensorKEKTSIPKA", "Home");
                                                                      });

                                                                  }).ToHtmlString() + "</td>" + "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("txtOperator_ll")
                                                                    .HtmlAttributes(new { id = "txtOperator_ll", placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })

                                                                    .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Frame Position" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("txtFramePos_ll")
                                                                    .HtmlAttributes(new { id = "txtFramePos_ll", placeholder = "Frame Position", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })

                                                                    .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Package Group" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'><div class='k-cmb' id='cmbPackageGroup_ll' style='width:100%;'></div><tr>" +
                                               "</table>"
                                                + "</div><div class='col-md-4'><label id='lblLogs_ll'></label></div></div>" + "<br />" +
                                                "<div id='grid_ll'></div>"

                                                  ); // End of GTS Mold Tab

                                    }) // End of Items
                                    )


                                    <!--
                                    tab for 100% Monitoring Epin Only
                                    -->
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab_monitoring_epin_only")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>Monitoring EPIN Only Mold</strong>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%; width:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 30%; font-family: Tahoma; font-weight: bold'><label for='srtLotNo' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 30%, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("txtLotNbr_monitoring_epin_only")
                                                                .HtmlAttributes(new { id = "txtLotNbr_epin", placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })
                                                                .ToHtmlString() + "</td>" +
                                                        "<td  rowspan='4' style='width: 40%; font-family: Tahoma; font-weight: bold; height:100%;' data-category='epin'>" +
                                                            Html.Kendo().Button()
                                                                .Name("cmd_load_monitoring_epin_only")
                                                                .HtmlAttributes(new { type = "button", @class = "k-primary cmdLoader", style = "width: 100%; min-height:100%" })
                                                                //.Events(events => events.Click("onClick"))
                                                                .Content("Load")

                                                                .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("cmb_machine_monitoring_epin_only")
                                                                  .HtmlAttributes(new { id = "cmbMachine_epin", style = "width: 100%" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("MachineListSensorKEKTSIPKA", "Home");
                                                                      });
                                                                  }).ToHtmlString() + "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("txtOperator_monitoring_epin_only")
                                                                    .HtmlAttributes(new { id = "txtOperator_epin", placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })

                                                                    .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Frame Position" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("txtFramePosition_monitoring_epin_only")
                                                                    .HtmlAttributes(new { id = "txtFramePos_epin", placeholder = "Frame Position", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })

                                                                    .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div><div class='col-md-4'><label id='lblLogs_epin'></label></div></div>" + "<br />" +
                                                "<div id='grid_epin'></div>"

                                                  ); // End of GTS Mold Tab

                                    }) // End of Items
                                    )

                                    <!--
                                    tab for die attach - bondline
                                    -->
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab_da_bondline")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    //.Show("onShowTab1")
                                    //.Select("onSelectTab1")
                                    //.Activate("onActivateTab1")
                                    //.ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>Bondline</strong>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%; width:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 30%; font-family: Tahoma; font-weight: bold'><label for='srtLotNo' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 30%, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("txtLotNbr_da_bondline")
                                                                .HtmlAttributes(new { id = "txtLotNbr_da_bondline", placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })
                                                                .ToHtmlString() + "</td>" +
                                                        "<td  rowspan='4' style='width: 40%; font-family: Tahoma; font-weight: bold; height:100%;' data-category='da_bondline'>" +
                                                            Html.Kendo().Button()
                                                                .Name("cmd_load_da_bondline")
                                                                .HtmlAttributes(new { type = "button", @class = "k-primary cmdLoader", style = "width: 100%; min-height:100%" })
                                                                //.Events(events => events.Click("onClick"))
                                                                .Content("Load")

                                                                .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("cmb_machine_da_bondline")
                                                                  .HtmlAttributes(new { id = "cmbMachine_da_bondline", style = "width: 100%" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("MachineListDieAttachBondline", "Home");
                                                                      });
                                                                  }).ToHtmlString() + "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("txtOperator_da_bondline")
                                                                    .HtmlAttributes(new { id = "txtOperator_da_bondline", placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })

                                                                    .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold'>" +
                                                            "Remarks" +
                                                        "</td>" +
                                                        "<td style='width: auto; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("txtRemarks_da_bondline")
                                                                    .HtmlAttributes(new { id = "txtRemarks_da_bondline", placeholder = "Remarks", required = "required", validationmessage = "Enter {0}", style = "width:100%; text-align: center" })

                                                                    .ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div><div class='col-md-4'><label id='lblLogs_da_bondline'></label></div></div>" + "<br />" +
                                                "<div id='grid_da_bondline'></div>"

                                                  ); // End of GTS Mold Tab

                                    }) // End of Items
                                    )

                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcMoldGts")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>GTS Mold</strong>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 400px; font-family: Tahoma; font-weight: bold'><label for='srtLotNo' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNo")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                        "<td  rowspan='3' style='width: 300px; font-family: Tahoma; font-weight: bold; height:100%;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submit")
                                                                .HtmlAttributes(new { type = "button", @class = "k-primary", style = "width: 300px; min-height:100%" })
                                                                .Events(events => events.Click("onClick"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipList")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListMoldGts", "Gts");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empName")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +
                                                Html.Kendo().Grid<SPCCalc.Models.Mold.ViewModelGts>()
                                                         .Name("gridMoldGTS")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Save()
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca" });

                                                             toolbar.Custom()
                                                                 .Name("load").Text("VIEW Data for CAMSTAR Recording")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommand" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                    .Visible(false)
                                                                    .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                    .Locked(true)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                    .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                    .Width(70);
                                                             columns.Bound(s => s.LotNumber)
                                                                    .Locked(true)
                                                                    .Title("Lot")
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                    .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                    .Locked(true)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                    .Width(120);
                                                             columns.Bound(s => s.FramePosition)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                    .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                    .Width(120);
                                                             columns.Bound(s => s.A2Operator)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                    .Width(120);
                                                             columns.Bound(s => s.PkgDiameter)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.PkgThickness)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120)
                                                                    ;
                                                             columns.Bound(s => s.PkgHeight)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.EPIN)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120)
                                                                    ;
                                                             columns.Bound(s => s.AValue)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.DXValue)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.SSPM)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Orange" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.DYValue)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.TBPM)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Orange" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                     .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(150);
                                                             columns.Bound(s => s.UpdatedBy)
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.DateUpdated)
                                                                     .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(120);
                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                                                {
                                                                                    model.Id(s => s.GUID);
                                                                                    model.Field(s => s.LotNumber).Editable(false);
                                                                                    model.Field(s => s.RowNo).Editable(false);
                                                                                    model.Field(s => s.Device).Editable(false);
                                                                                    model.Field(s => s.Machine).Editable(false);
                                                                                    model.Field(s => s.A2Operator).Editable(false);
                                                                                    model.Field(s => s.FramePosition).Editable(false);
                                                                                    model.Field(s => s.PkgDiameter).Editable(false);
                                                                                    model.Field(s => s.PkgHeight).Editable(false);
                                                                                    model.Field(s => s.AValue).Editable(false);
                                                                                    model.Field(s => s.DXValue).Editable(false);
                                                                                    model.Field(s => s.SSPM).Editable(false);
                                                                                    model.Field(s => s.DYValue).Editable(false);
                                                                                    model.Field(s => s.TBPM).Editable(false);
                                                                                    model.Field(s => s.Status).Editable(false);
                                                                                })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCCalcMoldGts_Read", "Gts").Data("additionalInfo"))
                                                               .Update("SPCCalcMoldGts_Update", "Gts"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of GTS Mold Tab

                                    }) // End of Items
                                    )
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcMoldGts2")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>GTS2 Mold</strong>") //Add item with text "Item1")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 400px; font-family: Tahoma; font-weight: bold'><label for='srtLotNo' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoGts2")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                        "<td  rowspan='3' style='width: 300px; font-family: Tahoma; font-weight: bold; height:100%;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitGts2")
                                                                .HtmlAttributes(new { type = "button", @class = "k-primary", style = "width: 300px; min-height:100%;" })
                                                                .Events(events => events.Click("onClickGts2"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListGts2")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListMoldGts", "Gts");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameGts2")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +
                                                Html.Kendo().Grid<SPCCalc.Models.Mold.ViewModelGts2>()
                                                         .Name("gridMoldGTS2")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Save()
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca" });

                                                             toolbar.Custom()
                                                                 .Name("load").Text("VIEW Data for CAMSTAR Recording")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandGts2" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                     .Visible(false)
                                                                     .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                     .Locked(true)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(70);
                                                             columns.Bound(s => s.LotNumber)
                                                                     .Locked(true)
                                                                     .Title("Lot")
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                     .Locked(true)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.FramePosition)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.A2Operator)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.PkgWidth)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120);
                                                             columns.Bound(s => s.PkgThickness)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120)
                                                                     ;
                                                             columns.Bound(s => s.PkgHeight)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120);
                                                             columns.Bound(s => s.EPIN)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120)
                                                                     ;
                                                             columns.Bound(s => s.AValue)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120);
                                                             columns.Bound(s => s.DXValue)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120);
                                                             columns.Bound(s => s.SSPM)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Orange" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120);
                                                             columns.Bound(s => s.DYValue)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120);
                                                             columns.Bound(s => s.TBPM)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Orange" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                     .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(150);
                                                             columns.Bound(s => s.UpdatedBy)
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.DateUpdated)
                                                                     .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(120);
                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                                                {
                                                                                    model.Id(s => s.GUID);
                                                                                    model.Field(s => s.LotNumber).Editable(false);
                                                                                    model.Field(s => s.RowNo).Editable(false);
                                                                                    model.Field(s => s.Device).Editable(false);
                                                                                    model.Field(s => s.Machine).Editable(false);
                                                                                    model.Field(s => s.A2Operator).Editable(false);
                                                                                    model.Field(s => s.FramePosition).Editable(false);
                                                                                    model.Field(s => s.PkgWidth).Editable(false);
                                                                                    model.Field(s => s.PkgHeight).Editable(false);
                                                                                    model.Field(s => s.AValue).Editable(false);
                                                                                    model.Field(s => s.DXValue).Editable(false);
                                                                                    model.Field(s => s.SSPM).Editable(false);
                                                                                    model.Field(s => s.DYValue).Editable(false);
                                                                                    model.Field(s => s.TBPM).Editable(false);
                                                                                    model.Field(s => s.Status).Editable(false);
                                                                                })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCCalcMoldGts2_Read", "Gts2").Data("additionalInfo"))
                                                               .Update("SPCCalcMoldGts2_Update", "Gts2"))

                                                           .ToHtmlString() +
                                                 "</div>"); // End of GTS2 Mold Tab

                                    }) // End of Items
                                    )
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcMoldSensor")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>UA Matrix Mold</strong>")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 400px; font-family: Tahoma; font-weight: bold'><label for='strLotNoUA' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoUA")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                        "<td  rowspan='3' style='width: 300px; font-family: Tahoma; font-weight: bold; height:100%;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitUA")
                                                                .HtmlAttributes(new { type = "button", @class = "k-primary", style = "width: 300px; min-height:100%" })
                                                                .Events(events => events.Click("onClickUA"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListUA")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("MachineListMoldSensor", "UaMatrix");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameUA")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +
                                                Html.Kendo().Grid<SPCCalc.Models.Mold.ViewModelUaMatrix>()
                                                         .Name("gridMoldSENSOR")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Save()
                                                                    .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca" });

                                                             toolbar.Custom()
                                                                     .Name("load").Text("VIEW Data for CAMSTAR Recording")
                                                                     .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandUA" })

                                                                     ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                     .Visible(false)
                                                                     .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                     .Locked(true)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(70);
                                                             columns.Bound(s => s.LotNumber)
                                                                     .Locked(true)
                                                                     .Title("Lot")
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                     .Locked(true)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.FramePosition)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.A2Operator)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.PkgWidth)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                     .Format("{0:N4}")
                                                                     .Width(120);
                                                             columns.Bound(s => s.PkgThickness)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120)
                                                                    .ClientTemplate("#= (PkgThickness == 0 || PkgThickness == null) ? '' : kendo.format('{0:N4}', PkgThickness) #");
                                                             columns.Bound(s => s.PkgHeight)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.EPIN)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet" })
                                                                    .Format("{0:N3}")
                                                                    .Width(120)
                                                                    .ClientTemplate("#= (EPIN == 0 || EPIN == null) ? '' : kendo.format('{0:N4}', EPIN) #");
                                                             columns.Bound(s => s.XPlacement)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.YPlacement)
                                                                    .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                    .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                    .Format("{0:N4}")
                                                                    .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                     .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(150);
                                                             columns.Bound(s => s.UpdatedBy)
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(120);
                                                             columns.Bound(s => s.DateUpdated)
                                                                     .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                     .Visible(false)
                                                                     .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                     .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                     .Width(120);
                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.A2Operator).Editable(false);
                                                                   model.Field(s => s.FramePosition).Editable(false);
                                                                   model.Field(s => s.PkgWidth).Editable(false);
                                                                   model.Field(s => s.PkgHeight).Editable(false);
                                                                   model.Field(s => s.XPlacement).Editable(false);
                                                                   model.Field(s => s.YPlacement).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCCalcMoldSensor_Read", "UaMatrix").Data("additionalInfo"))
                                                               .Update("SPCCalcMoldSensor_Update", "UaMatrix"))


                                                               .ToHtmlString() + "</div>"

                                                  ); // End of Sensor Mold Tab
                                    }) // End of Items
                                    )
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcMoldKMatrixTOKTKN")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>K-Matrix TOK/KB/KC/KN Mold</strong>")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 400px; font-family: Tahoma; font-weight: bold'><label for='strLotNoTOKTKN' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoTOKTKN")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                        "<td  rowspan='3' style='width: 300px; font-family: Tahoma; font-weight: bold; height:100%;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitTOKTKN")
                                                                .HtmlAttributes(new { type = "button", @class = "k-primary", style = "width: 300px; min-height:100%" })
                                                                .Events(events => events.Click("onClickTOKTKN"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListTOKTKN")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("MachineListMoldKMatrixTOKTKN", "KMatrix");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameTOKTKN")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Mold.ViewModelKMatrix>()
                                                         .Name("gridMoldKMATRIXTOKTKN")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Save()
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca" });

                                                             toolbar.Custom()
                                                                 .Name("load").Text("VIEW Data for CAMSTAR Recording")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandTOKTKN" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                 .Visible(false)
                                                                 .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                 .Locked(true)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(70);
                                                             columns.Bound(s => s.LotNumber)
                                                                 .Locked(true)
                                                                 .Title("Lot")
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                 .Locked(true)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.FramePosition)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.A2Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.PkgWidth)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N4}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.PkgHeight)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             columns.Bound(s => s.EPIN)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             columns.Bound(s => s.XPlacement)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             columns.Bound(s => s.YPlacement)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             //.ClientTemplate("#= (EPIN == 0) ? '' : kendo.format('{0:N4}', EPIN) #");
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.UpdatedBy)
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);
                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.A2Operator).Editable(false);
                                                                   model.Field(s => s.FramePosition).Editable(false);
                                                                   model.Field(s => s.PkgWidth).Editable(false);
                                                                   model.Field(s => s.PkgHeight).Editable(false);
                                                                   model.Field(s => s.XPlacement).Editable(false);
                                                                   model.Field(s => s.YPlacement).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCCalcMoldKMatrixTOKTKN_Read", "KMatrix").Data("additionalInfo"))
                                                               .Update("SPCCalcMoldKMatrixTOKTKN_Update", "KMatrix"))
                                                           //.Events(ev => ev.DataBound("onDataBoundMoldSensorNextCellDown"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of K-Matrix TOK/KB/KC/KN Mold Tab
                                    }) // End of Items
                                    )

                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcMoldSohed")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>SOHED Mold</strong>")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 400px; font-family: Tahoma; font-weight: bold'><label for='strLotNoSohed' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoSohed")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                        "<td  rowspan='3' style='width: 300px; font-family: Tahoma; font-weight: bold; height:100%;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitSohed")
                                                                .HtmlAttributes(new { type = "button", @class = "k-primary", style = "width: 300px; min-height:100%" })
                                                                .Events(events => events.Click("onClickSohed"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListSohed")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListMoldSohed", "Sohed");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameSohed")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +
                                                Html.Kendo().Grid<SPCCalc.Models.Mold.ViewModelSohed>()
                                                         .Name("gridMoldSohed")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             //toolbar.Save()
                                                             //.HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca" });

                                                             toolbar.Custom()
                                                                 .Name("load").Text("VIEW Data for CAMSTAR Recording")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSohed" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                 .Visible(false)
                                                                 .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                 .Locked(true)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(70);
                                                             columns.Bound(s => s.LotNumber)
                                                                 .Locked(true)
                                                                 .Title("Lot")
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                 .Locked(true)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.FramePosition)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.A2Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.SSPFO)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             columns.Bound(s => s.TBPO)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N4}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.PSSM)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N4}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.PkgWidth)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N4}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.PkgThickness)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             columns.Bound(s => s.PTBM)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N4}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.PkgHeight)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N4}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.UpdatedBy)
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);
                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.A2Operator).Editable(false);
                                                                   model.Field(s => s.FramePosition).Editable(false);
                                                                   model.Field(s => s.SSPFO).Editable(false);
                                                                   model.Field(s => s.TBPO).Editable(false);
                                                                   model.Field(s => s.PSSM).Editable(false);
                                                                   model.Field(s => s.PkgWidth).Editable(false);
                                                                   model.Field(s => s.PkgThickness).Editable(false);
                                                                   model.Field(s => s.PTBM).Editable(false);


                                                                   model.Field(s => s.PkgHeight).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCCalcMoldSohed_Read", "Sohed").Data("additionalInfo"))
                                                               .Update("SPCCalcMoldSohed_Update", "Sohed"))
                                                               .Events(e => e.Save("copyRemarksMoldSohed"))


                                                               .ToHtmlString() + "</div>"
                                                  ); // End of Sohed Mold Tab
                                    }) // End of Items
                                    )
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcMoldCS")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>Current Sensor Mold</strong>")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                                "<table class='table' style='border:1px solid black; height:100%;'>" +
                                                    "<tr>" +
                                                        "<td style='width: 400px; font-family: Tahoma; font-weight: bold'><label for='strLotNoCS' class='required'>" +
                                                            "Enter Lot#</label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma; font-weight: bold'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoCS")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                        "<td  rowspan='3' style='width: 300px; font-family: Tahoma; font-weight: bold; height:100%;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitCS")
                                                                .HtmlAttributes(new { type = "button", @class = "k-primary", style = "width: 300px; min-height:100%" })
                                                                .Events(events => events.Click("onClickCS"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListCS")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListMoldCS", "CurrentSensor");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "<tr>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                                            "A2 Operator" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameCS")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +
                                                Html.Kendo().Grid<SPCCalc.Models.Mold.ViewModelCurrentSensor>()
                                                         .Name("gridMoldCS")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             //toolbar.Save()
                                                             //.HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca" });

                                                             toolbar.Custom()
                                                                 .Name("load").Text("VIEW Data for CAMSTAR Recording")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandCS" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                 .Visible(false)
                                                                 .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                 .Locked(true)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(70);
                                                             columns.Bound(s => s.LotNumber)
                                                                 .Locked(true)
                                                                 .Title("Lot")
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                 .Locked(true)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.FramePosition)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.A2Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.PkgHeight)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             columns.Bound(s => s.PkgWidth)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N4}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.PfssMisalign)
                                                                .Title("PFSS Misalign")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             columns.Bound(s => s.PkgThickness)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                .Format("{0:N4}")
                                                                .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.UpdatedBy)
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);
                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.A2Operator).Editable(false);
                                                                   model.Field(s => s.FramePosition).Editable(false);
                                                                   model.Field(s => s.PkgHeight).Editable(false);
                                                                   model.Field(s => s.PkgWidth).Editable(false);
                                                                   model.Field(s => s.PfssMisalign).Editable(false);
                                                                   model.Field(s => s.PkgThickness).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCCalcMoldCS_Read", "CurrentSensor").Data("additionalInfo"))
                                                               .Update("SPCCalcMoldCS_Update", "CurrentSensor"))
                                                               .Events(e => e.Save("copyRemarksMoldCS"))


                                                               .ToHtmlString() + "</div>"
                                                  ); // End of Current Sensor Mold Tab
                                    }) // End of Items
                                    )
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)

                                    .Name("tab1SpcWbSohed")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {

                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>BST</strong>")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div>" +


                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoSohedBs' class='required'>" +

                                                            "Lot Number: </label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()

                                                                .Name("strLotNoSohedBs")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameSohedBs")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitSohedBs")
                                                                .HtmlAttributes(new { id = "btnWbSohedBs", type = "button", @class = "k-primary", style = "width:250px;height:100%" })
                                                                .Events(events => events.Click("onClickSohedBs"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +

                                                            "Machine: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListSohedBs")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListSohedBs").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbSohed", "WirebondSohed");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupSohedBs")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("SOHEDWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupSohedBs").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("WipDataSetupSohedBs", "WirebondSohed");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgSohedBsRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgSohedBs", new { @cols = 107, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkSohedBs")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSohedBs>()
                                                         .Name("gridWbSohedBs")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()
                                                                 .Name("loadSohedBs").Text("View BST Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSohedBs" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarSohedBs").Text("Submit To Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitSohedBs" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartSohedBs").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartSohedBs" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(70);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet", id = "RemarksWbSohedBs" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.BST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N2}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.BSFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.DageProgramBST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.BST).Editable(false);
                                                                   model.Field(s => s.BSFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramBST).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBSohedBs_Read", "WirebondSohed").Data("additionalInfo"))
                                                               .Update(update => update.Action("SPCCalcWbSohedBs_Update", "WirebondSohed")))
                                                               .Events(e => e.Save("copyRemarksWbSohedBs"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of SohedBs WB Tab

                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>BST PBO</strong>")
                                          .Encoded(false)
                                          .Content("<br /><div class='container-fluid'><div>" +


                                              "<table class='table'>" +
                                                  "<tr>" +
                                                      "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoSohedBsPbo' class='required'>" +

                                                          "Lot Number:</label>" +
                                                      "</td>" +
                                                      "<td style='width: 300px, font-family: Tahoma;'>" +
                                                          Html.Kendo().TextBox()
                                                              .Name("strLotNoSohedBsPbo")
                                                              .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                              .ToHtmlString() +
                                                      "</td>" +

                                                      "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                          "A2 Operator:" +
                                                      "</td>" +
                                                      "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                           Html.Kendo().TextBox()
                                                                  .Name("empNameSohedBsPbo")
                                                                  .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                  .ToHtmlString() +
                                                      "</td>" +
                                                      "<td>" +
                                                      "</td>" +
                                                      "<td>" +
                                                      "</td>" +
                                                      "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                          Html.Kendo().Button()
                                                              .Name("submitSohedBsPbo")
                                                              .HtmlAttributes(new { id = "btnWbSohedBsPbo", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                              .Events(events => events.Click("onClickSohedBsPbo"))
                                                              .Content("Load")
                                                              .ToHtmlString() +
                                                      "</td>" +
                                                  "</tr>" +
                                                  "<tr>" +
                                                      "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +

                                                          "Machine: " +
                                                      "</td>" +
                                                      "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                           Html.Kendo().DropDownList()
                                                                .Name("equipListSohedBsPbo")
                                                                .HtmlAttributes(new { style = "width: 300px" })
                                                                .DataTextField("ResourceName")
                                                                .DataValueField("ResourceId")
                                                                .AutoBind(false)
                                                                .Events(e =>
                                                                {
                                                                    e.Change("onChangeEquipListSohedBsPbo").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                })
                                                                .DataSource(source =>
                                                                {
                                                                    source.Read(read =>
                                                                    {

                                                                        read.Action("MachineListWbSohed", "WirebondSohed");
                                                                    });
                                                                }).ToHtmlString() +
                                                      "</td>" +
                                                      "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupSohedBsPbo")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("SOHEDWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupSohedBsPbo").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupSohedBs", "WirebondSohed");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                  "</tr>" +
                                                  "<tr id='msgSohedBsPboRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgSohedBsPbo", new { @cols = 107, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkSohedBsPbo")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                             "</table>"
                                              + "</div></div>" + "<br />" +
                                              "<div>" +

                                              Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSohedBsPbo>()
                                                       .Name("gridWbSohedBsPbo")
                                                       .ToolBar(toolbar =>
                                                       {
                                                           toolbar.Custom()

                                                               .Name("loadSohedBsPbo").Text("View BST Data")
                                                               .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSohedBsPbo" })
                                                               ;

                                                           toolbar.Custom()
                                                                 .Name("submitToCamstarSohedBsPbo").Text("Submit To Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitSohedBsPbo" })
                                                                 ;

                                                           toolbar.Custom()
                                                               .Name("loadSpcChartSohedBsPbo").Text("View Chart")
                                                               .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartSohedBsPbo" })
                                                               ;
                                                       })
                                                       .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                       .Columns(columns =>
                                                       {
                                                           columns.Bound(s => s.GUID)
                                                              .Visible(false)
                                                              .Width(120);
                                                           columns.Bound(s => s.Status)
                                                              .Locked(true)
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                              .Width(120);
                                                           columns.Bound(s => s.LotNumber)
                                                              .Locked(true)
                                                              .Title("Lot")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(120);
                                                           columns.Bound(s => s.Device)
                                                              .Locked(true)
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(120);
                                                           columns.Bound(s => s.RowNo)
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(70);
                                                           columns.Bound(s => s.DageSerialNo)
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(120);
                                                           columns.Bound(s => s.Date)
                                                              .Format("{0:dd/MM/yyyy}")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(120);
                                                           columns.Bound(s => s.Time)
                                                              .Format("{0:HH:mm:ss}")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(120);
                                                           columns.Bound(s => s.RunNo)
                                                              .Title("Run#")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(100);
                                                           columns.Bound(s => s.WireSize)
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(100);
                                                           columns.Bound(s => s.MachineName)
                                                              .Title("Machine Name from Dage")
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(120);
                                                           columns.Bound(s => s.Machine)
                                                              .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                              .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                              .Width(120);
                                                           columns.Bound(s => s.Operator)
                                                               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                               .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                               .Width(120);
                                                           columns.Bound(s => s.Remarks)
                                                               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                               .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet", id = "RemarksWbSohedBs" })
                                                               .Width(120);
                                                           columns.Bound(s => s.BST)
                                                               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                               .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                               .Format("{0:N2}")
                                                               .Width(120);
                                                           columns.Bound(s => s.BSFailureMode)
                                                               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                               .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                               .Format("{0:N0}")
                                                               .Width(120);
                                                           columns.Bound(s => s.DateCreated)
                                                               .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                               .Visible(false)
                                                               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                               .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                               .Width(150);
                                                           columns.Bound(s => s.DateUpdated)
                                                               .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                               .Visible(false)
                                                               .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                               .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                               .Width(120);

                                                       })
                                                         .AutoBind(false)
                                                         .Pageable(pager => pager
                                                         .Refresh(true))
                                                         .Sortable()
                                                         .Scrollable()
                                                         .Resizable(resizable => resizable.Columns(true))
                                                         .Navigatable()
                                                         .HtmlAttributes(new { style = "height: 650px;" })
                                                         .DataSource(dataSource => dataSource
                                                             .Ajax().Model(model =>
                                                             {
                                                                 model.Id(s => s.GUID);
                                                                 model.Field(s => s.LotNumber).Editable(false);
                                                                 model.Field(s => s.Device).Editable(false);
                                                                 model.Field(s => s.RowNo).Editable(false);
                                                                 model.Field(s => s.DageSerialNo).Editable(false);
                                                                 model.Field(s => s.Date).Editable(false);
                                                                 model.Field(s => s.Time).Editable(false);
                                                                 model.Field(s => s.RunNo).Editable(false);
                                                                 model.Field(s => s.WireSize).Editable(false);
                                                                 model.Field(s => s.MachineName).Editable(false);
                                                                 model.Field(s => s.Machine).Editable(false);
                                                                 model.Field(s => s.Operator).Editable(false);
                                                                 model.Field(s => s.BST).Editable(false);
                                                                 model.Field(s => s.BSFailureMode).Editable(false);
                                                                 model.Field(s => s.Status).Editable(false);
                                                             })
                                                             .Batch(true)
                                                             .PageSize(100)
                                                             .Events(events => events.Error("error_handler"))
                                                             .Model(model => model.Id(s => s.LotNumber))
                                                             .Read(read => read.Action("SPCWBSohedBsPbo_Read", "WirebondSohed").Data("additionalInfo"))
                                                             .Update(update => update.Action("SPCCalcWbSohedBsPbo_Update", "WirebondSohed")))
                                                             .Events(e => e.Save("copyRemarksWbSohedBsPbo"))
                                                         .ToHtmlString() + "</div>"

                                                ); // End of SohedBsPbo WB Tab

                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>WPT</strong>")
                                            .Encoded(false)
                                           .Content("<br /><div class='container-fluid'><div>" +
                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoSohedWp' class='required'>" +

                                                            "Lot Number: </label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoSohedWp")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameSohedWp")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })

                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitSohedWp")
                                                                .HtmlAttributes(new { id = "btnWbSohedWp", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                                .Events(events => events.Click("onClickSohedWp"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Machine: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListSohedWp")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListSohedWp").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbSohed", "WirebondSohed");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupSohedWp")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("SOHEDWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupSohedWp").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupSohedWp", "WirebondSohed");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgSohedWpRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgSohedWp", new { @cols = 107, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkSohedWp")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSohedWp>()
                                                         .Name("gridWbSohedWp")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()

                                                                 .Name("loadSohedWp").Text("View WPT Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSohedWp" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarSohedWp").Text("Submit to Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitSohedWp" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartSohedWp").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartSohedWp" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;  height:35px;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(70);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.WPT)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N2}")
                                                                 .Width(120)
                                                                 .ClientTemplate("#= (WPT == 0) ? '' : kendo.format('{0:N2}', WPT) #");
                                                             columns.Bound(s => s.WPFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120)
                                                                 .ClientTemplate("#= (WPFailureMode == 0) ? '' : kendo.format('{0:N0}', WPFailureMode) #");
                                                             columns.Bound(s => s.DageProgramWPT)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.WPT).Editable(false);
                                                                   model.Field(s => s.WPFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramWPT).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBSohedWp_Read", "WirebondSohed").Data("additionalInfo"))
                                                               .Update("SPCCalcWbSohedWp_Update", "WirebondSohed"))
                                                               .Events(e => e.Save("copyRemarksWbSohedWp"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of SohedWp WB Tab

                                        //items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>WPT PBO</strong>")
                                        //    .Encoded(false)
                                        //    .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                        //        "<table class='table' style='border:1px solid black; height:100%;'>" +
                                        //            "<tr>" +
                                        //                "<td style='width: 400px; font-family: Tahoma; font-weight: bold'><label for='strLotNoSohedWpPbo' class='required'>" +
                                        //                    "Enter Lot#</label>" +
                                        //                "</td>" +
                                        //                "<td style='width: 300px, font-family: Tahoma; font-weight: bold'>" +
                                        //                    Html.Kendo().TextBox()
                                        //                        .Name("strLotNoSohedWpPbo")
                                        //                        .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                        //                        .ToHtmlString() +
                                        //                "</td>" +
                                        //                "<td  rowspan='3' style='width: 300px; font-family: Tahoma; font-weight: bold; height:100%;'>" +
                                        //                    Html.Kendo().Button()
                                        //                        .Name("submitSohedWpPbo")
                                        //                        .HtmlAttributes(new { type = "button", @class = "k-primary", style = "width: 300px; min-height:100%" })
                                        //    //.Events(events => events.Click("onClickSohedWpPbo"))
                                        //                        .Content("Load")
                                        //                        .Enable(false)
                                        //                        .ToHtmlString() +
                                        //                "</td>" +
                                        //            "</tr>" +
                                        //            "<tr>" +
                                        //                "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                        //                    "Machine" +
                                        //                "</td>" +
                                        //                "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                        //                     Html.Kendo().DropDownList()
                                        //                          .Name("equipListSohedWpPbo")
                                        //                          .HtmlAttributes(new { style = "width: 300px" })
                                        //                          .DataTextField("ResourceName")
                                        //                          .DataValueField("ResourceId")
                                        //                          .AutoBind(false)
                                        //                          .Events(e =>
                                        //                          {
                                        //                              e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                        //                          })
                                        //                          .DataSource(source =>
                                        //                          {
                                        //                              source.Read(read =>
                                        //                              {

                                        //                                  read.Action("MachineListWbSohed", "WirebondSohed");
                                        //                              });
                                        //                          }).ToHtmlString() +
                                        //                "</td>" +
                                        //            "<tr>" +
                                        //                "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                        //                    "A2 Operator" +
                                        //                "</td>" +
                                        //                "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                        //                     Html.Kendo().TextBox()
                                        //                            .Name("empNameSohedWpPbo")
                                        //                            .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                        //                            .ToHtmlString() +
                                        //                "</td>" +
                                        //            "</tr>" +
                                        //       "</table>"
                                        //        + "</div></div>" + "<br />" +
                                        //        "<div>" +

                                        //        Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSohedWpPbo>()
                                        //                 .Name("gridWbSohedWpPbo")
                                        //                 .ToolBar(toolbar =>
                                        //                 {
                                        //                     //toolbar.Save()
                                        //                     //    .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca" });

                                        //                     toolbar.Custom()
                                        //                         .Name("loadSohedWpPbo").Text("VIEW WPT Data for CAMSTAR Recording")
                                        //                         .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSohedWpPbo" })
                                        //                         ;
                                        //                 })
                                        //                 .Editable(editable => editable.Mode(GridEditMode.InCell))
                                        //                 .Columns(columns =>
                                        //                 {
                                        //                     columns.Bound(s => s.GUID)
                                        //                        .Visible(false)
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Status)
                                        //                        .Locked(true)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;  height:35px;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.LotNumber)
                                        //                        .Locked(true)
                                        //                        .Title("Lot")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Device)
                                        //                        .Locked(true)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.RowNo)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(70);
                                        //                     columns.Bound(s => s.DageSerialNo)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Date)
                                        //                        .Format("{0:dd/MM/yyyy}")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Time)
                                        //                        .Format("{0:HH:mm:ss}")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.RunNo)
                                        //                        .Title("Run#")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(100);
                                        //                     columns.Bound(s => s.WireSize)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(100);
                                        //                     columns.Bound(s => s.MachineName)
                                        //                        .Title("Machine Name from Dage")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Machine)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Operator)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                         .Width(120);
                                        //                     columns.Bound(s => s.Remarks)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                        //                         .Width(120);
                                        //                     columns.Bound(s => s.WPT)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                        //                         .Format("{0:N2}")
                                        //                         .Width(120)
                                        //                         .ClientTemplate("#= (WPT == 0) ? '' : kendo.format('{0:N2}', WPT) #");
                                        //                     columns.Bound(s => s.WPFailureMode)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                        //                         .Format("{0:N0}")
                                        //                         .Width(120)
                                        //                         .ClientTemplate("#= (WPFailureMode == 0) ? '' : kendo.format('{0:N0}', WPFailureMode) #");
                                        //                     columns.Bound(s => s.DateCreated)
                                        //                         .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                        //                         .Visible(false)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                        //                         .Width(150);
                                        //                     columns.Bound(s => s.DateUpdated)
                                        //                         .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                        //                         .Visible(false)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                        //                         .Width(120);
                                        //                 })
                                        //                   .AutoBind(false)
                                        //                   .Pageable(pager => pager
                                        //                   .Refresh(true))
                                        //                   .Sortable()
                                        //                   .Scrollable()
                                        //                   .Resizable(resizable => resizable.Columns(true))
                                        //                   .Navigatable()
                                        //                   .HtmlAttributes(new { style = "height: 650px;" })
                                        //                   .DataSource(dataSource => dataSource
                                        //                       .Ajax().Model(model =>
                                        //                       {
                                        //                           model.Id(s => s.GUID);
                                        //                           model.Field(s => s.LotNumber).Editable(false);
                                        //                           model.Field(s => s.Device).Editable(false);
                                        //                           model.Field(s => s.RowNo).Editable(false);
                                        //                           model.Field(s => s.DageSerialNo).Editable(false);
                                        //                           model.Field(s => s.Date).Editable(false);
                                        //                           model.Field(s => s.Time).Editable(false);
                                        //                           model.Field(s => s.RunNo).Editable(false);
                                        //                           model.Field(s => s.WireSize).Editable(false);
                                        //                           model.Field(s => s.MachineName).Editable(false);
                                        //                           model.Field(s => s.Machine).Editable(false);
                                        //                           model.Field(s => s.Operator).Editable(false);
                                        //                           model.Field(s => s.WPT).Editable(false);
                                        //                           model.Field(s => s.WPFailureMode).Editable(false);
                                        //                           model.Field(s => s.Status).Editable(false);
                                        //                       })
                                        //                       .Batch(true)
                                        //                       .PageSize(100)
                                        //                       .Events(events => events.Error("error_handler"))
                                        //                       .Model(model => model.Id(s => s.LotNumber))
                                        //                       .Read(read => read.Action("SPCWBSohedWpPbo_Read", "WirebondSohed").Data("additionalInfo"))
                                        //                       .Update("SPCCalcWbSohedWpPbo_Update", "WirebondSohed"))
                                        //                       .Events(e => e.Save("copyRemarksWbSohedWpPbo"))
                                        //                   .ToHtmlString() + "</div>"

                                        //          ); // End of SohedWpPbo WB Tab
                                    }) // End of Items
                                    )
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcWbGts")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>BST</strong>")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div>" +


                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoWbGtsBs' class='required'>" +

                                                            "Lot Number: </label>" +
                                                        "</td>" +

                                                        "<td style='width: 300px, font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoWbGtsBs")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameWbGtsBs")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:350px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitWbGtsBs")
                                                                .HtmlAttributes(new { id = "btnWbGtsBs", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                                .Events(events => events.Click("onClickWbGtsBs"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +

                                                            "Machine: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListWbGtsBs")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListWbGtsBs").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbGts", "WirebondGts");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupGtsBs")
                                                                  .HtmlAttributes(new { style = "width: 350px;" })
                                                                  .DataTextField("GTSWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupGtsBs").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupGtsBs", "WirebondGts").Data("additionalInfo")
                                                                              .Type(HttpVerbs.Post)
                                                                              ;
                                                                      })
                                                                      //.ServerFiltering(true)
                                                                      ;
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgGtsBsRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgGtsBs", new { @cols = 113, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkGtsBs")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondGtsBs>()
                                                         .Name("gridWbGtsBs")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()

                                                                 .Name("load").Text("View BST Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandWbGtsBs" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarGtsBs").Text("Submit to Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitGtsBs" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartGtsBs").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartGtsBs" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(50);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.BST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N2}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.BSFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.DageProgramBST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.BST).Editable(false);
                                                                   model.Field(s => s.BSFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramBST).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBGtsBs_Read", "WirebondGts").Data("additionalInfo"))
                                                               .Update("SPCCalcWbGtsBs_Update", "WirebondGts"))
                                                               .Events(e => e.Save("copyRemarksWbGtsBs"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of GtsBs WB Tab

                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>BST PBO</strong>")
                                            .Encoded(false)
                                            .Content("<br /><div class='container-fluid'><div>" +
                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoWbGtsBsPbo' class='required'>" +

                                                            "Lot Number:</label>" +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoWbGtsBsPbo")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameWbGtsBsPbo")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:350px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitWbGtsBsPbo")
                                                                .HtmlAttributes(new { id = "btnWbGtsBsPbo", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                                .Events(events => events.Click("onClickWbGtsBsPbo"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +

                                                            "Machine: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListWbGtsBsPbo")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListWbGtsBsPbo").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbGts", "WirebondGts");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupGtsBsPbo")
                                                                  .HtmlAttributes(new { style = "width: 350px;" })
                                                                  .DataTextField("GTSWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupGtsBsPbo").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupGtsBs", "WirebondGts").Data("additionalInfo")
                                                                              .Type(HttpVerbs.Post);
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgGtsBsPboRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +

                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgGtsBsPbo", new { @cols = 113, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkGtsBsPbo")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondGtsBsPbo>()
                                                         .Name("gridWbGtsBsPbo")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()

                                                                 .Name("load").Text("View BST Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandWbGtsBsPbo" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarGtsBsPbo").Text("Submit to Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitGtsBsPbo" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartGtsBsPbo").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartGtsBsPbo" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(50);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.BST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N2}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.BSFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.DageProgramBST)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.BST).Editable(false);
                                                                   model.Field(s => s.BSFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramBST).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBGtsBsPbo_Read", "WirebondGts").Data("additionalInfo"))
                                                               .Update("SPCCalcWbGtsBsPbo_Update", "WirebondGts"))
                                                               .Events(e => e.Save("copyRemarksWbGtsBsPbo"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of GtsBsPbo WB Tab

                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>WPT</strong>")
                                            .Encoded(false)
                                            .Content("<br /><div class='container-fluid'><div>" +


                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style=' font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoWbGtsWp' class='required'>" +

                                                            "Lot Number: </label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoWbGtsWp")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameWbGtsWp")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:350px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitWbGtsWp")
                                                                .HtmlAttributes(new { id = "btnWbGtsWp", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                                .Events(events => events.Click("onClickWbGtsWp"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListWbGtsWp")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListWbGtsWp").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbGts", "WirebondGts");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupGtsWp")
                                                                  .HtmlAttributes(new { style = "width: 350px;" })
                                                                  .DataTextField("GTSWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupGtsWp").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupGtsWp", "WirebondGts").Data("additionalInfo")
                                                                              .Type(HttpVerbs.Post);
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgGtsWpRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgGtsWp", new { @cols = 113, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkGtsWp")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondGtsWp>()
                                                         .Name("gridWbGtsWp")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()

                                                                 .Name("load").Text("View WPT Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandWbGtsWp" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarGtsWp").Text("Submit to Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitGtsWp" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartGtsWp").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartGtsWp" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(50);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.WPT)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                .Format("{0:N2}")
                                                                .Width(120)
                                                                .ClientTemplate("#= (WPT == 0) ? '' : kendo.format('{0:N2}', WPT) #");
                                                             columns.Bound(s => s.WPFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120)
                                                                 .ClientTemplate("#= (WPFailureMode == 0) ? '' : kendo.format('{0:N0}', WPFailureMode) #");
                                                             columns.Bound(s => s.DageProgramWPT)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.WPT).Editable(false);
                                                                   model.Field(s => s.WPFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramWPT).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBGtsWp_Read", "WirebondGts").Data("additionalInfo"))
                                                               .Update("SPCCalcWbGtsWp_Update", "WirebondGts"))
                                                               .Events(e => e.Save("copyRemarksWbGtsWp"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of GtsWp WB Tab

                                        //items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>WPT PBO</strong>")
                                        //    .Encoded(false)
                                        //    .Content("<br /><div class='container-fluid'><div class='col-md-6'>" +

                                        //        "<table class='table' style='border:1px solid black; height:100%;'>" +
                                        //            "<tr>" +
                                        //                "<td style='width: 400px; font-family: Tahoma; font-weight: bold'><label for='strLotNoWbGtsWpPbo' class='required'>" +
                                        //                    "Enter Lot#</label>" +
                                        //                "</td>" +
                                        //                "<td style='width: 300px, font-family: Tahoma; font-weight: bold'>" +
                                        //                    Html.Kendo().TextBox()
                                        //                        .Name("strLotNoWbGtsWpPbo")
                                        //                        .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                        //                        .ToHtmlString() +
                                        //                "</td>" +
                                        //                "<td  rowspan='3' style='width: 300px; font-family: Tahoma; font-weight: bold; height:100%;'>" +
                                        //                    Html.Kendo().Button()
                                        //                        .Name("submitWbGtsWpPbo")
                                        //                        .HtmlAttributes(new { type = "button", @class = "k-primary", style = "width: 300px; min-height:100%" })
                                        //                        .Events(events => events.Click("onClickWbGtsWpPbo"))
                                        //                        .Content("Load")
                                        //                        .Enable(false)
                                        //                        .ToHtmlString() +
                                        //                "</td>" +
                                        //            "</tr>" +
                                        //            "<tr>" +
                                        //                "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                        //                    "Machine" +
                                        //                "</td>" +
                                        //                "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                        //                     Html.Kendo().DropDownList()
                                        //                          .Name("equipListWbGtsWpPbo")
                                        //                          .HtmlAttributes(new { style = "width: 300px" })
                                        //                          .DataTextField("ResourceName")
                                        //                          .DataValueField("ResourceId")
                                        //                          .AutoBind(false)
                                        //                          .Events(e =>
                                        //                          {
                                        //                              e.Change("onChange").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                        //                          })
                                        //                          .DataSource(source =>
                                        //                          {
                                        //                              source.Read(read =>
                                        //                              {

                                        //                                  read.Action("MachineListWbGts", "WirebondGts");
                                        //                              });
                                        //                          }).ToHtmlString() +
                                        //                "</td>" +
                                        //            "<tr>" +
                                        //                "<td style='width: 300px; font-family: Tahoma; font-weight: bold'>" +
                                        //                    "A2 Operator" +
                                        //                "</td>" +
                                        //                "<td style='width: 300px; font-family: Tahoma; font-weight: bold; text-align: center'>" +
                                        //                     Html.Kendo().TextBox()
                                        //                            .Name("empNameWbGtsWpPbo")
                                        //                            .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                        //                            .ToHtmlString() +
                                        //                "</td>" +
                                        //            "</tr>" +
                                        //       "</table>"
                                        //        + "</div></div>" + "<br />" +
                                        //        "<div>" +

                                        //        Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondGtsWpPbo>()
                                        //                 .Name("gridWbGtsWpPbo")
                                        //                 .ToolBar(toolbar =>
                                        //                 {
                                        //                     //toolbar.Save()
                                        //                     //    .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca" });

                                        //                     toolbar.Custom()
                                        //                         .Name("load").Text("VIEW Data for CAMSTAR Recording")
                                        //                         .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandWbGtsWpPbo" })
                                        //                         ;
                                        //                 })
                                        //                 .Editable(editable => editable.Mode(GridEditMode.InCell))
                                        //                 .Columns(columns =>
                                        //                 {
                                        //                     columns.Bound(s => s.GUID)
                                        //                        .Visible(false)
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Status)
                                        //                        .Locked(true)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.LotNumber)
                                        //                        .Locked(true)
                                        //                        .Title("Lot")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Device)
                                        //                        .Locked(true)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.RowNo)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(50);
                                        //                     columns.Bound(s => s.DageSerialNo)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Date)
                                        //                        .Format("{0:dd/MM/yyyy}")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Time)
                                        //                        .Format("{0:HH:mm:ss}")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.RunNo)
                                        //                        .Title("Run#")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(100);
                                        //                     columns.Bound(s => s.WireSize)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(100);
                                        //                     columns.Bound(s => s.MachineName)
                                        //                        .Title("Machine Name from Dage")
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(100);
                                        //                     columns.Bound(s => s.Machine)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                        .Width(120);
                                        //                     columns.Bound(s => s.Operator)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                        //                         .Width(120);
                                        //                     columns.Bound(s => s.Remarks)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                        //                         .Width(120);
                                        //                     columns.Bound(s => s.WPT)
                                        //                        .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                        .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                        //                        .Format("{0:N2}")
                                        //                        .Width(120)
                                        //                        .ClientTemplate("#= (WPT == 0) ? '' : kendo.format('{0:N2}', WPT) #");
                                        //                     columns.Bound(s => s.WPFailureMode)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                        //                         .Format("{0:N0}")
                                        //                         .Width(120)
                                        //                         .ClientTemplate("#= (WPFailureMode == 0) ? '' : kendo.format('{0:N0}', WPFailureMode) #");
                                        //                     columns.Bound(s => s.DateCreated)
                                        //                         .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                        //                         .Visible(false)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                        //                         .Width(150);
                                        //                     columns.Bound(s => s.DateUpdated)
                                        //                         .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                        //                         .Visible(false)
                                        //                         .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                        //                         .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                        //                         .Width(120);

                                        //                 })
                                        //                   .AutoBind(false)
                                        //                   .Pageable(pager => pager
                                        //                   .Refresh(true))
                                        //                   .Sortable()
                                        //                   .Scrollable()
                                        //                   .Resizable(resizable => resizable.Columns(true))
                                        //                   .Navigatable()
                                        //                   .HtmlAttributes(new { style = "height: 650px;" })
                                        //                   .DataSource(dataSource => dataSource
                                        //                       .Ajax().Model(model =>
                                        //                       {
                                        //                           model.Id(s => s.GUID);
                                        //                           model.Field(s => s.LotNumber).Editable(false);
                                        //                           model.Field(s => s.Device).Editable(false);
                                        //                           model.Field(s => s.RowNo).Editable(false);
                                        //                           model.Field(s => s.DageSerialNo).Editable(false);
                                        //                           model.Field(s => s.Date).Editable(false);
                                        //                           model.Field(s => s.Time).Editable(false);
                                        //                           model.Field(s => s.RunNo).Editable(false);
                                        //                           model.Field(s => s.WireSize).Editable(false);
                                        //                           model.Field(s => s.MachineName).Editable(false);
                                        //                           model.Field(s => s.Machine).Editable(false);
                                        //                           model.Field(s => s.Operator).Editable(false);
                                        //                           model.Field(s => s.WPT).Editable(false);
                                        //                           model.Field(s => s.WPFailureMode).Editable(false);
                                        //                           model.Field(s => s.Status).Editable(false);
                                        //                       })
                                        //                       .Batch(true)
                                        //                       .PageSize(100)
                                        //                       .Events(events => events.Error("error_handler"))
                                        //                       .Model(model => model.Id(s => s.LotNumber))
                                        //                       .Read(read => read.Action("SPCWBGtsWpPbo_Read", "WirebondGts").Data("additionalInfo"))
                                        //                       .Update("SPCCalcWbGtsWpPbo_Update", "WirebondGts"))
                                        //                       .Events(e => e.Save("copyRemarksWbGtsWpPbo"))
                                        //                   .ToHtmlString() + "</div>"

                                        //          ); // End of GtsWpPbo WB Tab

                                    }) // End of Items
                                    )

                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcWbSensor")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>BST</strong>")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div>" +
                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoWbSensorBs' class='required'>" +

                                                            "Lot Number: </label>" +
                                                        "</td>" +

                                                        "<td style='width: 300px, font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoWbSensorBs")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameWbSensorBs")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:350px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitWbSensorBs")
                                                                .HtmlAttributes(new { id = "btnWbSensorBs", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                                .Events(events => events.Click("onClickWbSensorBs"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +

                                                            "Machine: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListWbSensorBs")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListWbSensorBs").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbSensor", "WirebondSensor");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupSensorBs")
                                                                  .HtmlAttributes(new { style = "width: 350px;" })
                                                                  .DataTextField("SensorWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupSensorBs").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupSensorBs", "WirebondSensor").Data("additionalInfo")
                                                                              .Type(HttpVerbs.Post)
                                                                              ;
                                                                      })
                                                                      //.ServerFiltering(true)
                                                                      ;
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgSensorBsRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgSensorBs", new { @cols = 113, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkSensorBs")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSensorBs>()
                                                         .Name("gridWbSensorBs")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()
                                                                 .Name("load").Text("View BST Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandWbSensorBs" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarSensorBs").Text("Submit to Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitSensorBs" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartSensorBs").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartSensorBs" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(50);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.BST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N2}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.BSFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.DageProgramBST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.BST).Editable(false);
                                                                   model.Field(s => s.BSFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramBST).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBSensorBs_Read", "WirebondSensor").Data("additionalInfo"))
                                                               .Update("SPCCalcWbSensorBs_Update", "WirebondSensor"))
                                                               .Events(e => e.Save("copyRemarksWbSensorBs"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of SensorBs WB Tab

                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>BST PBO</strong>")
                                            .Encoded(false)
                                            .Content("<br /><div class='container-fluid'><div>" +
                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoWbSensorBsPbo' class='required'>" +

                                                            "Lot Number:</label>" +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoWbSensorBsPbo")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameWbSensorBsPbo")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:350px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitWbSensorBsPbo")
                                                                .HtmlAttributes(new { id = "btnWbSensorBsPbo", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                                .Events(events => events.Click("onClickWbSensorBsPbo"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +

                                                            "Machine: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListWbSensorBsPbo")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListWbSensorBsPbo").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("MachineListWbSensor", "WirebondSensor");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupSensorBsPbo")
                                                                  .HtmlAttributes(new { style = "width: 350px;" })
                                                                  .DataTextField("SensorWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupSensorBsPbo").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupSensorBs", "WirebondSensor") //.Data("additionalInfo")
                                                                              .Type(HttpVerbs.Post);
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgSensorBsPboRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgSensorBsPbo", new { @cols = 113, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkSensorBsPbo")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSensorBsPbo>()
                                                         .Name("gridWbSensorBsPbo")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()
                                                                 .Name("load").Text("View BST Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandWbSensorBsPbo" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarSensorBsPbo").Text("Submit to Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitSensorBsPbo" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartSensorBsPbo").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartSensorBsPbo" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(50);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.BST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N2}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.BSFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.DageProgramBST)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.BST).Editable(false);
                                                                   model.Field(s => s.BSFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramBST).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBSensorBsPbo_Read", "WirebondSensor").Data("additionalInfo"))
                                                               .Update("SPCCalcWbSensorBsPbo_Update", "WirebondSensor"))
                                                               .Events(e => e.Save("copyRemarksWbSensorBsPbo"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of SensorBsPbo WB Tab

                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>WPT</strong>")
                                            .Encoded(false)
                                            .Content("<br /><div class='container-fluid'><div>" +


                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style=' font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoWbSensorWp' class='required'>" +
                                                            "Lot Number: </label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoWbSensorWp")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameWbSensorWp")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:350px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitWbSensorWp")
                                                                .HtmlAttributes(new { id = "btnWbSensorWp", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                                .Events(events => events.Click("onClickWbSensorWp"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Machine" +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListWbSensorWp")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListWbSensorWp").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbSensor", "WirebondSensor");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupSensorWp")
                                                                  .HtmlAttributes(new { style = "width: 350px;" })
                                                                  .DataTextField("SensorWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupSensorWp").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupSensorWp", "WirebondSensor").Data("additionalInfo")
                                                                              .Type(HttpVerbs.Post);
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgSensorWpRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgSensorWp", new { @cols = 113, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() + "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkSensorWp")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSensorWp>()
                                                         .Name("gridWbSensorWp")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()

                                                                 .Name("load").Text("View WPT Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandWbSensorWp" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarSensorWp").Text("Submit to Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitSensorWp" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartSensorWp").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartSensorWp" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(50);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.WPT)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                .Format("{0:N2}")
                                                                .Width(120)
                                                                .ClientTemplate("#= (WPT == 0) ? '' : kendo.format('{0:N2}', WPT) #");
                                                             columns.Bound(s => s.WPFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120)
                                                                 .ClientTemplate("#= (WPFailureMode == 0) ? '' : kendo.format('{0:N0}', WPFailureMode) #");
                                                             columns.Bound(s => s.DageProgramWPT)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.WPT).Editable(false);
                                                                   model.Field(s => s.WPFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramWPT).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBSensorWp_Read", "WirebondSensor").Data("additionalInfo"))
                                                               .Update("SPCCalcWbSensorWp_Update", "WirebondSensor"))
                                                               .Events(e => e.Save("copyRemarksWbSensorWp"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of SensorWp WB Tab

                                    }) // End of Items
                                    )
                                    @(Html.Kendo().TabStrip()
                                    .Animation(false)
                                    .Name("tab1SpcWbSL")                                                        //The name of the tabstrip is mandatory. It specifies the "id" attribute of the widget.
                                    .HtmlAttributes(new { height = "100%" })
                                    .Events(events => events
                                    .Show("onShowTab1")
                                    .Select("onSelectTab1")
                                    .Activate("onActivateTab1")
                                    .ContentLoad("onContentLoadTab1")
                                    .Error("onErrorTab1"))
                                    .Items(items =>
                                    {
                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>BST</strong>")
                                            .Encoded(false)
                                            .Selected(true)
                                            .Content("<br /><div class='container-fluid'><div>" +
                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoWbSLBs' class='required'>" +

                                                            "Lot Number: </label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoWbSLBs")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameWbSLBs")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitSLBs")
                                                                .HtmlAttributes(new { id = "btnWbSLBs", type = "button", @class = "k-primary", style = "width:250px;height:100%" })
                                                                .Events(events => events.Click("onClickSLBs"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +

                                                            "Machine: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListWbSLBs")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListWbSLBs").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbSL", "WirebondSL");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupSLBs")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("SLWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupSLBs").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("WipDataSetupSLBs", "WirebondSL").Data("additionalInfo")
                                                                              .Type(HttpVerbs.Post);
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgSLBsRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgSLBs", new { @cols = 107, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkSLBs")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSLBs>()
                                                         .Name("gridWbSLBs")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()
                                                                 .Name("loadSLBs").Text("View BST Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSLBs" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarSLBs").Text("Submit To Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitSLBs" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartSLBs").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartSLBs" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold; height:35px;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(70);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet", id = "RemarksWbSohedBs" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.BST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N2}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.BSFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120);
                                                             columns.Bound(s => s.DageProgramBST)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.BST).Editable(false);
                                                                   model.Field(s => s.BSFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramBST).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBSLBs_Read", "WirebondSL").Data("additionalInfo"))
                                                               .Update(update => update.Action("SPCCalcWbSLBs_Update", "WirebondSL")))
                                                               .Events(e => e.Save("copyRemarksWbSLBs"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of SLBs WB Tab

                                        items.Add().Text("<span style='font-weight:bold' class=\"fa fa-file-text-o\"></span>&nbsp;&nbsp;<strong>WPT</strong>")
                                            .Encoded(false)
                                            .Content("<br /><div class='container-fluid'><div>" +
                                                "<table class='table'>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'><label for='strLotNoWbSLWp' class='required'>" +

                                                            "Lot Number: </label>" +
                                                        "</td>" +
                                                        "<td style='width: 300px, font-family: Tahoma;'>" +
                                                            Html.Kendo().TextBox()
                                                                .Name("strLotNoWbSLWp")
                                                                .HtmlAttributes(new { placeholder = "Lot Number", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })
                                                                .ToHtmlString() +
                                                        "</td>" +

                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "A2 Operator: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().TextBox()
                                                                    .Name("empNameWbSLWp")
                                                                    .HtmlAttributes(new { placeholder = "Operator", required = "required", validationmessage = "Enter {0}", style = "width:300px; text-align: center" })

                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td>" +
                                                        "</td>" +
                                                        "<td  rowspan='2' style='font-family: Tahoma;'>" +
                                                            Html.Kendo().Button()
                                                                .Name("submitSLWp")
                                                                .HtmlAttributes(new { id = "btnWbSLWp", type = "button", @class = "k-primary", style = "width: 250px; height:100%" })
                                                                .Events(events => events.Click("onClickSLWp"))
                                                                .Content("Load")
                                                                .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Machine: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("equipListWbSLWp")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("ResourceName")
                                                                  .DataValueField("ResourceId")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeEquipListWbSLWp").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {

                                                                          read.Action("MachineListWbSL", "WirebondSL");
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Wip Data Setup: " +
                                                        "</td>" +
                                                        "<td style='width: 300px; font-family: Tahoma; text-align: center'>" +
                                                             Html.Kendo().DropDownList()
                                                                  .Name("wbWipDataSetupSLWp")
                                                                  .HtmlAttributes(new { style = "width: 300px" })
                                                                  .DataTextField("SLWBSetups")
                                                                  .DataValueField("Guid")
                                                                  .AutoBind(false)
                                                                  .Events(e =>
                                                                  {
                                                                      e.Change("onChangeWbWipDataSetupSLWp").Select("onSelect").Open("onOpen").Close("onClose").DataBound("onDataBound").Filtering("onFiltering");
                                                                  })
                                                                  .DataSource(source =>
                                                                  {
                                                                      source.Read(read =>
                                                                      {
                                                                          read.Action("WipDataSetupSLWp", "WirebondSL").Data("additionalInfo")
                                                                              .Type(HttpVerbs.Post);
                                                                      });
                                                                  }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr id='msgSLWpRow' style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: top'>" +
                                                            "Message: " +
                                                        "</td>" +
                                                        "<td colspan='4' style='font-family: Tahoma;'>" +
                                                                 Html.TextArea("msgSLWp", new { @cols = 107, @rows = 1, @readonly = "true", @style = "border: none; outline: none; resize:none" }).ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                                    "<tr style='display:none'>" +
                                                        "<td style='font-family: Tahoma; font-weight: bold; text-align: right; vertical-align: middle'>" +
                                                            "Chart Link: " +
                                                        "</td>" +
                                                        "<td rowspan='3' style='font-family: Tahoma;'>" +
                                                                 Html.Kendo().TextBox()
                                                                    .Name("chartLinkSLWp")
                                                                    .HtmlAttributes(new { style = "width:300px; text-align: center; ", @readonly = "true" })
                                                                    .ToHtmlString() +
                                                        "</td>" +
                                                    "</tr>" +
                                               "</table>"
                                                + "</div></div>" + "<br />" +
                                                "<div>" +

                                                Html.Kendo().Grid<SPCCalc.Models.Wirebond.ViewModelWirebondSLWp>()
                                                         .Name("gridWbSLWp")
                                                         .ToolBar(toolbar =>
                                                         {
                                                             toolbar.Custom()
                                                                 .Name("loadSLWp").Text("View WPT Data")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSLWp" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("submitToCamstarSLWp").Text("Submit to Camstar")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandSubmitSLWp" })
                                                                 ;

                                                             toolbar.Custom()
                                                                 .Name("loadSpcChartSLWp").Text("View Chart")
                                                                 .HtmlAttributes(new { style = "color: white; font-weight:bold; background-color: #428bca", id = "customCommandloadChartSLWp" })
                                                                 ;
                                                         })
                                                         .Editable(editable => editable.Mode(GridEditMode.InCell))
                                                         .Columns(columns =>
                                                         {
                                                             columns.Bound(s => s.GUID)
                                                                .Visible(false)
                                                                .Width(120);
                                                             columns.Bound(s => s.Status)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;  height:35px;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LimeGreen" })
                                                                .Width(120);
                                                             columns.Bound(s => s.LotNumber)
                                                                .Locked(true)
                                                                .Title("Lot")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Device)
                                                                .Locked(true)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RowNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(70);
                                                             columns.Bound(s => s.DageSerialNo)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Date)
                                                                .Format("{0:dd/MM/yyyy}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Time)
                                                                .Format("{0:HH:mm:ss}")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.RunNo)
                                                                .Title("Run#")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.WireSize)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(100);
                                                             columns.Bound(s => s.MachineName)
                                                                .Title("Machine Name from Dage")
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Machine)
                                                                .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                .Width(120);
                                                             columns.Bound(s => s.Operator)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightGray;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.Remarks)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: Violet;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.WPT)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Format("{0:N2}")
                                                                 .Width(120)
                                                                 .ClientTemplate("#= (WPT == 0) ? '' : kendo.format('{0:N2}', WPT) #");
                                                             columns.Bound(s => s.WPFailureMode)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue" })
                                                                 .Format("{0:N0}")
                                                                 .Width(120)
                                                                 .ClientTemplate("#= (WPFailureMode == 0) ? '' : kendo.format('{0:N0}', WPFailureMode) #");
                                                             columns.Bound(s => s.DageProgramWPT)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small; background-color: LightBlue;" })
                                                                 .Width(120);
                                                             columns.Bound(s => s.DateCreated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(150);
                                                             columns.Bound(s => s.DateUpdated)
                                                                 .Format("{0:dd/MM/yyyy HH:mm:ss}")
                                                                 .Visible(false)
                                                                 .HeaderHtmlAttributes(new { style = "text-align: center; font-weight:bold;" })
                                                                 .HtmlAttributes(new { style = "text-align: center; font-weight:bold; font-size:small;" })
                                                                 .Width(120);

                                                         })
                                                           .AutoBind(false)
                                                           .Pageable(pager => pager
                                                           .Refresh(true))
                                                           .Sortable()
                                                           .Scrollable()
                                                           .Resizable(resizable => resizable.Columns(true))
                                                           .Navigatable()
                                                           .HtmlAttributes(new { style = "height: 650px;" })
                                                           .DataSource(dataSource => dataSource
                                                               .Ajax().Model(model =>
                                                               {
                                                                   model.Id(s => s.GUID);
                                                                   model.Field(s => s.LotNumber).Editable(false);
                                                                   model.Field(s => s.Device).Editable(false);
                                                                   model.Field(s => s.RowNo).Editable(false);
                                                                   model.Field(s => s.DageSerialNo).Editable(false);
                                                                   model.Field(s => s.Date).Editable(false);
                                                                   model.Field(s => s.Time).Editable(false);
                                                                   model.Field(s => s.RunNo).Editable(false);
                                                                   model.Field(s => s.WireSize).Editable(false);
                                                                   model.Field(s => s.MachineName).Editable(false);
                                                                   model.Field(s => s.Machine).Editable(false);
                                                                   model.Field(s => s.Operator).Editable(false);
                                                                   model.Field(s => s.WPT).Editable(false);
                                                                   model.Field(s => s.WPFailureMode).Editable(false);
                                                                   model.Field(s => s.DageProgramWPT).Editable(false);
                                                                   model.Field(s => s.Status).Editable(false);
                                                               })
                                                               .Batch(true)
                                                               .PageSize(100)
                                                               .Events(events => events.Error("error_handler"))
                                                               .Model(model => model.Id(s => s.LotNumber))
                                                               .Read(read => read.Action("SPCWBSLWp_Read", "WirebondSL").Data("additionalInfo"))
                                                               .Update("SPCCalcWbSLWp_Update", "WirebondSL"))
                                                               .Events(e => e.Save("copyRemarksWbSLWp"))
                                                           .ToHtmlString() + "</div>"

                                                  ); // End of SLWp WB Tab

                                    }) // End of Items
                                    )
                                </div>);

                                }).ToHtmlString() //+ "</div>" // End of Content (top-pane)
                );

                            //Debug console
                            verticalPanes.Add()
                            .HtmlAttributes(new { id = "bottom-pane" })
                            .Scrollable(true)
                            .Collapsed(true)
                            .Collapsible(true)
                            .MaxSize("145px")
                            .MinSize("130px")
                            .Size("145px")
                            .Content("<div style='padding-top: 8px; padding-left: 8px; padding-bottom: 2px; padding-right: 8px; overflow:hidden; '>Debuging Console<div class='console'></div></div>");
                        })

        )
        @* End of Splitter  *@
    </div>
    @(Html.Kendo().Tooltip()
        .For("#treeviewMenu")
        .Filter("li span.k-in")
        .Position(TooltipPosition.Right)
        .Content("Loading...")
        .Width(200)
        .Events(events => events.Hide("onHideTooltip").Show("onShowTooltip"))
    )
    <script src="@Url.Content("~/Scripts/index.js")"></script>
    <script src="@Url.Content("~/Scripts/wirebond.gts.js")"></script>
    <script src="@Url.Content("~/Scripts/wirebond.sensor.js")"></script>
    <script src="@Url.Content("~/Scripts/wirebond.sl.js")"></script>
    <script src="@Url.Content("~/Scripts/wirebond.sohed.js")"></script>
    <script type="text/javascript">
        var treeviewMain;   // Treeview Menu

        var splitterElement;

        function copyRemarksMoldCS(data) {

            var items = this.dataSource.data();
            for (var i = 0; i < items.length; i++) {
                var remarks = $("#Remarks").val();
                items[i].set("Remarks", remarks);
            }
            $('#gridMoldCS').data('kendoGrid').dataSource.sync();
            this.refresh();

            $('#modalUpdateSuccess').modal('show');

        }

        function copyRemarksMoldSohed(data) {

            var items = this.dataSource.data();
            for (var i = 0; i < items.length; i++) {
                var remarks = $("#Remarks").val();
                items[i].set("Remarks", remarks);
            }
            $('#gridMoldSohed').data('kendoGrid').dataSource.sync();
            this.refresh();

            $('#modalUpdateSuccess').modal('show');

        }

        function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }
        //------- Start Tooltip -----------------------------------------------------------------------------------------
        function onShowTooltip(e) {
            kendoConsole.log("event :: show tooltip");

            var tooltip = this;
            var text = treeviewMain.text(tooltip.target());

            tooltip.content.text("Display " + text + " data.");
        }

        function onHideTooltip(e) {
            kendoConsole.log("event :: hide tooltip");
        }

        //------- End Tooltip -----------------------------------------------------------------------------------------


        //------- Start Splitter Resize -----------------------------------------------------------------------------------------
        var resizeSplitter = function () {
            var windowwidth = $(window).width();
            var windowheight = $(window).height() - 50;

            // Resize Main Div
            var $maindiv = $('#mainDiv');    // .. make current size permanent.
            $maindiv.css({
                width: windowwidth,
                height: windowheight
            });

            var $renderDiv = $('#renderBodyDiv');    // .. make current size permanent.
            $renderDiv.css({

                height: windowheight - 50
            });


            // resize main splitter element
            var $splitter = $("#mainSplitter");
            $splitter.css("height", windowheight - 23 + "px");

            // Resize
            $splitter.data("kendoSplitter").resize();
        };

        function resizeGrid(gridName) {
            var gridElement = $(gridName);
            var dataArea = gridElement.find(".k-grid-content");

            var newGridHeight = $(document).height() - 140;
            var newDataAreaHeight = newGridHeight - 50;

            dataArea.height(newDataAreaHeight);
            gridElement.height(newGridHeight);

        }

        $(window).resize(function () {
            resizeSplitter();
            //            resizeGrid("#gridMoldGTS");

        });


        //------- End Splitter Resize  -----------------------------------------------------------------------------------------

        function getSelectedNodeFullPath(e) {
            var kitems = $(e.node).add($(e.node).parentsUntil('.k-treeview', '.k-item'));
            var texts = $.map(kitems, function (kitem) {
                return $(kitem).find('>div span.k-in').text();
            });

            kendoConsole.log("Fullpath: " + texts.join('/'));

            return texts.join('/')
        }


        //------- Start Treeview Menu -----------------------------------------------------------------------------------------

        function onTreeviewMenuSelect(e) {

            var parent = this.parent(e.node);       // `this` refers to the treeview object
            var parentText;
            var selectedText = this.text(e.node);

            if (parent.length > 0) {
                parentText = treeviewMain.text(parent);
            }
            else {
                // get the current selected text for parent
                parentText = this.text(e.node);
            }

            kendoConsole.log("Selecting Node: " + selectedText + " Parent: " + parentText);

            // Get selected node fullpath

            $("#fullpath").html(getSelectedNodeFullPath(e));

        }

        function onTreeviewMenuChange(e) {
            var parent;
            var parentText;

            var selected = treeviewMain.select()
            var getitem = treeviewMain.dataItem(selected);
            var selectedText = treeviewMain.text(selected);  //e.sender._current.context.innerText.trim();

            parent = treeviewMain.parent(treeviewMain.findByUid(getitem.uid));

            if (parent.length > 0) {
                parentText = treeviewMain.text(parent);
            }
            else {
                // get the current selected text for parent
                parentText = selectedText;
            }

            kendoConsole.log("Selected Change " + selectedText + " Parent: " + parentText);

            t_strip.show(parentText.toLowerCase(), selectedText.toLowerCase());

            $('#txtData').text("");
            $('#strLotNo').val("");
            $('#empName').val("");

            $('#strLotNoUA').val("");
            $('#empNameUA').val("");

            $('#strLotNoGts2').val("");
            $('#empNameGts2').val("");

            $('#strLotNoTOKTKN').val("");
            $('#empNameTOKTKN').val("");

            $('#strLotNoCS').val("");
            $('#empNameCS').val("");

            $('#strLotNoSohed').val("");
            $('#empNameSohed').val("");

            $('#strLotNoSohedBs').val("");
            $('#empNameSohedBs').val("");

            $('#strLotNoSohedWp').val("");
            $('#empNameSohedWp').val("");

            $('#strLotNoWbGtsWp').val("");
            $('#empNameWbGtsWp').val("");


            //            if (parentText.toLowerCase() == "ampi spc calculator" && selectedText.toLowerCase() == "ampi spc calculator") {
            //                $("#welcomeNote").show();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();


            //            }

            //            else if (parentText.toLowerCase() == "ampi spc calculator" && selectedText.toLowerCase() == "mold") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();

            //            }

            //            else if (parentText.toLowerCase() == "ampi spc calculator" && selectedText.toLowerCase() == "wirebond") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();

            //            }


            //            else if (parentText.toLowerCase() == "mold" && selectedText.toLowerCase() == "gts") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").show();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();

            //                $("#gridMoldGTSList").hide();
            //                $("#gridMoldGTS").hide();
            //            } // End of else if

            //            else if (parentText.toLowerCase() == "mold" && selectedText.toLowerCase() == "gts2") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").show();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();


            //                $("#gridMoldGTS2").hide();
            //            } // End of else if

            //            else if (parentText.toLowerCase() == "mold" && selectedText.toLowerCase() == "ua matrix") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").show();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();

            //                $("#gridMoldSENSOR").hide();
            //            } // End of else if

            //            else if (parentText.toLowerCase() == "mold" && selectedText.toLowerCase() == "k-matrix tok/kb/kc/kn") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").show();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();

            //                $("#gridMoldKMATRIXTOKTKN").hide();
            //            } // End of else if

            //            else if (parentText.toLowerCase() == "mold" && selectedText.toLowerCase() == "k-matrix ke & kf & kt") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").show();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();

            //                $("#gridMoldKMATRIXKEKFKT").hide();
            //            } // End of else if

            //            else if (parentText.toLowerCase() == "mold" && selectedText.toLowerCase() == "current sensor") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").show();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();

            //                $("#gridMoldCS").hide();
            //            } // End of else if

            //			else if (parentText.toLowerCase() == "mold" && selectedText.toLowerCase() == "sohed") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").show();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").hide();

            //                $("#gridMoldSohed").hide();
            //            } // End of else if

            //            else if (parentText.toLowerCase() == "wirebond" && selectedText.toLowerCase() == "sohed") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").show();
            //                $("#tab1SpcWbGts").hide();

            //                $("#gridWbSohedBs").hide();
            //                $("#gridWbSohedWp").hide();
            //            } // End of else if

            //            else if (parentText.toLowerCase() == "wirebond" && selectedText.toLowerCase() == "gts") {
            //                $("#welcomeNote").hide();
            //                $("#tab1SpcMoldGts").hide();
            //                $("#tab1SpcMoldGts2").hide();
            //                $("#tab1SpcMoldSensor").hide();
            //                $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //                $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //                $("#tab1SpcMoldCS").hide();
            //				$("#tab1SpcMoldSohed").hide();
            //                $("#tab1SpcWbSohed").hide();
            //                $("#tab1SpcWbGts").show();

            //                $("#gridWbGtsBs").hide();
            //                $("#gridWbGtsWp").hide();
            //            } // End of else if

        } // End of function


        function onTreeviewMenuCollapse(e) {

            kendoConsole.log("Collapsing " + treeviewMain.text(e.node));

            // Select the current expanded node.
            treeviewMain.select(e.node);
        }

        function onTreeviewMenuExpand(e) {

            kendoConsole.log("Expanding " + treeviewMain.text(e.node));

            // Select the current expanded node.
            treeviewMain.select(e.node);
        }

        //------- End Treeview Menu -----------------------------------------------------------------------------------------

        // Check Treeview groupings
        function checkNodeParent(parent, value) {
            var results = -1; // default or not found

            //                results = testGroups.indexOf(parent);

            return results;
        }

        // Console Window
        function getWidth() {
            return $(window).width();
        }

        // Console Window
        function getHeight() {
            return $(window).height();
        }


        //------- Start Tab1  -----------------------------------------------------------------------------------------

        function onShowTab1(e) {
            kendoConsole.log("Shown: " + $(e.item).find("> .k-link").text());
        }

        function onSelectTab1(e) {
            kendoConsole.log("Selected: " + $(e.item).find("> .k-link").text());

            $('#strLotNoSohedBs').val("");
            $('#empNameSohedBs').val("");
            $('#strLotNoSohedWp').val("");
            $('#empNameSohedWp').val("");

            $('#strLotNoSohedBsPbo').val("");
            $('#empNameSohedBsPbo').val("");
            $('#strLotNoSohedWpPbo').val("");
            $('#empNameSohedWpPbo').val("");

            $("#gridWbSohedBs").hide();
            $("#gridWbSohedWp").hide();

            $("#gridWbSohedBsPbo").hide();
            $("#gridWbSohedWpPbo").hide();

            $('#strLotNoWbGtsBs').val("");
            $('#empNameWbGtsBs').val("");
            $('#strLotNoWbGtsWp').val("");
            $('#empNameWbGtsWp').val("");

            $('#strLotNoWbGtsBsPbo').val("");
            $('#empNameWbGtsBsPbo').val("");
            $('#strLotNoWbGtsWpPbo').val("");
            $('#empNameWbGtsWpPbo').val("");

            $("#gridWbGtsBs").hide();
            $("#gridWbGtsWp").hide();

            $("#gridWbGtsBsPbo").hide();
            $("#gridWbGtsWpPbo").hide();

            $('#strLotNoWbSensorBs').val("");
            $('#empNameWbSensorBs').val("");
            $('#strLotNoWbSensorWp').val("");
            $('#empNameWbSensorWp').val("");

            $('#strLotNoWbSensorBsPbo').val("");
            $('#empNameWbSensorBsPbo').val("");

            $("#gridWbSensorBs").hide();
            $("#gridWbSensorWp").hide();
            $("#gridWbSensorBsPbo").hide();

            $("#msgGtsBsRow").hide();
            $("#msgGtsBsPboRow").hide();
            $("#msgGtsWpRow").hide();

            $("#msgSensorBsRow").hide();
            $("#msgSensorBsPboRow").hide();
            $("#msgSensorWpRow").hide();

            $("#msgSohedBsRow").hide();
            $("#msgSohedBsPboRow").hide();
            $("#msgSohedWpRow").hide();

        }

        function onActivateTab1(e) {
            kendoConsole.log("Activated: " + $(e.item).find("> .k-link").text());

            $(".k-pager-refresh").trigger('click');

        }

        function onContentLoadTab1(e) {
            kendoConsole.log("Content loaded in <b>" + $(e.item).find("> .k-link").text() + "</b> and starts with <b>" + $(e.contentElement).text().substr(0, 20) + "...</b>");
        }

        function onErrorTab1(e) {
            kendoConsole.error("Loading failed with " + e.xhr.statusText + " " + e.xhr.status);
        }

        //------- End Tab1  -----------------------------------------------------------------------------------------
        function onClick(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            $("#gridMoldGTS").show();
            $("#gridMoldGTSList").hide();
            $("#gridMoldGTS").data("kendoGrid").dataSource.read();
        }

        function onClickGts2(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            $("#gridMoldGTS2").show();
            $("#gridMoldGTS2").data("kendoGrid").dataSource.read();
        }

        function onClickUA(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            $("#gridMoldSENSOR").show();
            $("#gridMoldSENSOR").data("kendoGrid").dataSource.read();
        }

        function onClickTOKTKN(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            $("#gridMoldKMATRIXTOKTKN").show();
            $("#gridMoldKMATRIXTOKTKN").data("kendoGrid").dataSource.read();
        }

        function onClickCS(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            $("#gridMoldCS").show();
            $("#gridMoldCS").data("kendoGrid").dataSource.read();
        }


        function onClickSohed(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoSohed").val();

            if ($("#strLotNoSohed").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {

                $.ajax({


                    url: '/Sohed/UpdateTableMoldSohed/'

                        , type: 'POST'
                        , data: JSON.stringify({ lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event
                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event
                            $("#spinner").hide();
                        }
                        , success: function (lotNumber, framePosition) {

                            if (lotNumber == "success") {

                                $("#gridMoldSohed").show();
                                $("#gridMoldSohed").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');

                            }

                            else if (lotNumber == "failed") {

                                $("#gridMoldSohed").hide();

                                $('#modalNotExist').modal('show');

                            }
                        }

                        , error: function (result) {

                            if (result.status == "500") {


                                alert(result.status + ' ' + result.statusText);


                            }
                            else {

                                alert(result.status + ' ' + result.statusText);

                            }
                        }

                });
            }

        }



        //        function onClickSohedWpPbo(e) {
        //            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

        //            var lotNo = $("#strLotNoSohedWpPbo").val();

        //            if ($("#strLotNoSohedWpPbo").val().toString() == "") {

        //                $('#modalEmptyLot').modal('show');


        //            }


        //            else {


        //                $.ajax({

        //                    url: '/Home/ReadEachFolderWbSohedWpPboDage3/'

        //                                        , type: 'POST'
        //                                        , data: JSON.stringify({ lotNumber: lotNo })
        //                                        , contentType: 'application/json'
        //                                        , beforeSend: function () {
        //                                            // Handle the beforeSend event





        //                                            $("#spinner").show();
        //                                        }
        //                                        , complete: function () {
        //                                            // Handle the complete event



        //                                            $("#spinner").hide();
        //                                        }
        //                                        , success: function (lotNumber) {

        //                                            if (lotNumber == "success") {

        //                                                alert("succes");
        //                                                $("#gridWbSohedWpPbo").show();
        //                                                $("#gridWbSohedWpPbo").data("kendoGrid").dataSource.read();
        //                                                $(".k-pager-refresh").trigger('click');

        //                                            }

        //                                            else if (lotNumber == "failed") {

        //                                                $("#gridWbSohedWpPbo").hide();

        //                                                $('#modalNotExist').modal('show');

        //                                            }


        //                                        }

        //                                        , error: function (result) {

        //                                            if (result.status == "500") {

        //                                                //                                                alert("The process cannot access the file because it is being used by another process.");
        //                                                alert(result.status + ' ' + result.statusText);


        //                                            }
        //                                            else {

        //                                                alert(result.status + ' ' + result.statusText);

        //                                            }


        //                                        }



        //                });
        //            }


        //        }
        function onClickSohedBs(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoSohedBs").val();

            if ($("#strLotNoSohedBs").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {

                $.ajax({

                    url: '/WirebondSohed/UpdateTableWbSohed/'
                        , type: 'POST'
                        , data: JSON.stringify({ module: "wirebondSohedBs", lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event
                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event
                            $("#spinner").hide();
                        }
                        , success: function (lotNumber) {

                            if (lotNumber == "success") {

                                $("#gridWbSohedBs").show();
                                $("#gridWbSohedBs").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');

                            }

                            else if (lotNumber == "failed") {

                                $("#gridWbSohedBs").hide();

                                $('#modalNotExist').modal('show');

                            }


                        }

                        , error: function (result) {

                            if (result.status == "500") {


                                alert(result.status + ' ' + result.statusText);


                            }
                            else {

                                alert(result.status + ' ' + result.statusText);

                            }


                        }

                });
            }

        }

        function onClickSohedBsPbo(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoSohedBsPbo").val();

            if ($("#strLotNoSohedBsPbo").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {

                $.ajax({
                    url: '/WirebondSohed/UpdateTableWbSohed/'
                        , type: 'POST'
                        , data: JSON.stringify({ module: "wirebondSohedBsPbo", lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event


                            $("#spinner").hide();
                        }
                        , success: function (lotNumber) {

                            if (lotNumber == "success") {

                                $("#gridWbSohedBsPbo").show();
                                $("#gridWbSohedBsPbo").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');
                            }


                            else if (lotNumber == "failed") {


                                $("#gridWbSohedBsPbo").hide();

                                $('#modalNotExist').modal('show');


                            }


                        }

                        , error: function (result) {

                            if (result.status == "500") {


                                alert(result.status + ' ' + result.statusText);


                            }
                            else {

                                alert(result.status + ' ' + result.statusText);

                            }


                        }

                });
            }


        }

        function onClickSohedWp(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoSohedWp").val();

            if ($("#strLotNoSohedWp").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {

                $.ajax({

                    url: '/WirebondSohed/UpdateTableWbSohed/'
                        , type: 'POST'
                        , data: JSON.stringify({ module: "wirebondSohedWp", lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event


                            $("#spinner").hide();
                        }
                        , success: function (lotNumber) {

                            if (lotNumber == "success") {


                                $("#gridWbSohedWp").show();
                                $("#gridWbSohedWp").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');
                            }

                            else if (lotNumber == "failed") {

                                $("#gridWbSohedWp").hide();

                                $('#modalNotExist').modal('show');
                            }
                        }
                        , error: function (result) {

                            if (result.status == "500") {

                                alert(result.status + ' ' + result.statusText);

                            }
                            else {


                                alert(result.status + ' ' + result.statusText);
                            }

                        }

                });
            }

        }

        function onClickWbGtsWp(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoWbGtsWp").val();

            if ($("#strLotNoWbGtsWp").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {

                $("#btnWbGtsWp").attr("disabled", "disabled");

                $.ajax({
                    url: '/WirebondGts/UpdateTableWbGts/'
                    , type: 'POST'
                    , data: JSON.stringify({ module: "wirebondGtsWp", lotNumber: lotNo })
                    , contentType: 'application/json'
                    , beforeSend: function () {
                        // Handle the beforeSend event
                        $("#spinner").show();
                    }
                    , complete: function () {
                        // Handle the complete event
                        $("#spinner").hide();
                    }
                    , success: function (lotNumber) {

                        if (lotNumber == "success") {

                            $("#gridWbGtsWp").show();
                            $("#gridWbGtsWp").data("kendoGrid").dataSource.read();
                            $(".k-pager-refresh").trigger('click');

                        }

                        else if (lotNumber == "failed") {

                            $("#gridWbGtsWp").hide();

                            $('#modalNotExist').modal('show');
                        }
                    }

                    , error: function (result) {

                        if (result.status == "500") {


                            alert(result.status + ' ' + result.statusText);


                        }
                        else {

                            alert(result.status + ' ' + result.statusText);

                        }


                    }
                });

                setTimeout('$("#btnWbGtsWp").removeAttr("disabled")', 1500);
            }

            $("#wbWipDataSetupGtsWp").data("kendoDropDownList").dataSource.read();
        }

        function onClickWbGtsWpPbo(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoWbGtsWpPbo").val();

            if ($("#strLotNoWbGtsWpPbo").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {

                $.ajax({

                    url: '/WirebondGts/UpdateTableWbGts/'
                        , type: 'POST'
                        , data: JSON.stringify({ module: "wirebondGtsWpPbo", lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event



                            $("#spinner").hide();
                        }
                        , success: function (lotNumber) {

                            if (lotNumber == "success") {

                                $("#gridWbGtsWpPbo").show();
                                $("#gridWbGtsWpPbo").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');

                            }

                            else if (lotNumber == "failed") {

                                $("#gridWbGtsWpPbo").hide();

                                $('#modalNotExist').modal('show');
                            }

                        }

                        , error: function (result) {

                            if (result.status == "500") {


                                alert(result.status + ' ' + result.statusText);


                            }
                            else {

                                alert(result.status + ' ' + result.statusText);

                            }


                        }
                });
            }
        }

        function onClickWbGtsBs(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoWbGtsBs").val();

            if ($("#strLotNoWbGtsBs").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {


                $("#btnWbGtsBs").attr("disabled", "disabled");

                $.ajax({
                    url: '/WirebondGts/UpdateTableWbGts/'
                        , type: 'POST'
                        , data: JSON.stringify({ module: "wirebondGtsBs", lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        }
                        , success: function (lotNumber) {

                            if (lotNumber == "success") {

                                $("#gridWbGtsBs").show();
                                $("#gridWbGtsBs").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');
                            }

                            else if (lotNumber == "failed") {

                                $("#gridWbGtsBs").hide();

                                $('#modalNotExist').modal('show');
                            }
                        }

                        , error: function (result) {

                            if (result.status == "500") {

                                alert(result.status + ' ' + result.statusText);
                            }
                            else {

                                alert(result.status + ' ' + result.statusText);
                            }
                        }

                });

                setTimeout('$("#btnWbGtsBs").removeAttr("disabled")', 1500);
            }

            $("#wbWipDataSetupGtsBs").data("kendoDropDownList").dataSource.read();
        }

        function onClickWbGtsBsPbo(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoWbGtsBsPbo").val();

            if ($("#strLotNoWbGtsBsPbo").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {

                $("#btnWbGtsBsPbo").attr("disabled", "disabled");

                $.ajax({

                    url: '/WirebondGts/UpdateTableWbGts/'
                        , type: 'POST'
                        , data: JSON.stringify({ module: "wirebondGtsBsPbo", lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        }
                        , success: function (lotNumber) {

                            if (lotNumber == "success") {

                                $("#gridWbGtsBsPbo").show();
                                $("#gridWbGtsBsPbo").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');
                            }

                            else if (lotNumber == "failed") {

                                $("#gridWbGtsBsPbo").hide();

                                $('#modalNotExist').modal('show');
                            }
                        }

                        , error: function (result) {

                            if (result.status == "500") {


                                alert(result.status + ' ' + result.statusText);
                            }
                            else {

                                alert(result.status + ' ' + result.statusText);
                            }
                        }

                });

                setTimeout('$("#btnWbGtsBsPbo").removeAttr("disabled")', 1500);
            }

            $("#wbWipDataSetupGtsBsPbo").data("kendoDropDownList").dataSource.read();

        }

        function onClickSLBs(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoWbSLBs").val();

            if ($("#strLotNoWbSLBs").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {


                $("#btnWbSLBs").attr("disabled", "disabled");

                $.ajax({
                    url: '/WirebondSL/UpdateTableWbSL/'
                        , type: 'POST'
                        , data: JSON.stringify({ module: "wirebondSLBs", lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        }
                        , success: function (lotNumber) {

                            if (lotNumber == "success") {

                                $("#gridWbSLBs").show();
                                $("#gridWbSLBs").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');
                            }

                            else if (lotNumber == "failed") {

                                $("#gridWbSLBs").hide();

                                $('#modalNotExist').modal('show');
                            }
                        }

                        , error: function (result) {

                            if (result.status == "500") {


                                alert(result.status + ' ' + result.statusText);
                            }
                            else {

                                alert(result.status + ' ' + result.statusText);
                            }
                        }

                });

                setTimeout('$("#btnWbSLBs").removeAttr("disabled")', 1500);
            }

            $("#wbWipDataSetupSLBs").data("kendoDropDownList").dataSource.read();

        }

        function onClickSLWp(e) {
            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            var lotNo = $("#strLotNoWbSLWp").val();

            if ($("#strLotNoWbSLWp").val().toString() == "") {

                $('#modalEmptyLot').modal('show');

            }

            else {


                $("#btnWbSLWp").attr("disabled", "disabled");

                $.ajax({
                    url: '/WirebondSL/UpdateTableWbSL/'
                        , type: 'POST'
                        , data: JSON.stringify({ module: "wirebondSLWp", lotNumber: lotNo })
                        , contentType: 'application/json'
                        , beforeSend: function () {
                            // Handle the beforeSend event

                            $("#spinner").show();
                        }
                        , complete: function () {
                            // Handle the complete event

                            $("#spinner").hide();
                        }
                        , success: function (lotNumber) {

                            if (lotNumber == "success") {

                                $("#gridWbSLWp").show();
                                $("#gridWbSLWp").data("kendoGrid").dataSource.read();
                                $(".k-pager-refresh").trigger('click');
                            }

                            else if (lotNumber == "failed") {

                                $("#gridWbSLWp").hide();

                                $('#modalNotExist').modal('show');
                            }
                        }

                        , error: function (result) {

                            if (result.status == "500") {


                                alert(result.status + ' ' + result.statusText);
                            }
                            else {

                                alert(result.status + ' ' + result.statusText);
                            }
                        }

                });

                setTimeout('$("#btnWbSLWp").removeAttr("disabled")', 1500);
            }

            $("#wbWipDataSetupSLWp").data("kendoDropDownList").dataSource.read();

        }


        function onLoadClick(e) {

            kendoConsole.log("event :: click (" + $(e.event.target).closest(".k-button").attr("id") + ")");

            callWIPDataWindow(true);

            return false;
        }

        $("#customCommand").click(function (e) {

            $.ajax({

                url: '/Gts/SPCCalcMoldGts_CamstarReading',
                type: 'POST',
                datatype: 'json',
                data: JSON.stringify({ strLotNo: $("#strLotNo").val() }),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    var lotNo = $("#strLotNo").val();

                    $('#txtData').text(lotNo);

                    $.each(data, function (i, item) {

                        var itemName = item.WIPDataValue.toString();

                        if (itemName.match(/\d+/g)) {
                            itemName = parseFloat(itemName).toFixed(4);
                        }
                        else {
                            itemName;
                        }


                        $('#txtData').text($('#txtData').val() + "\n" + itemName);

                    }); // end of each loop

                } // end of success data

            });  // end ajax request

            $("#gridMoldGTS").data('kendoGrid').dataSource.data([]);

            callWIPDataWindow(true);

            e.preventDefault();
        });


        $("#customCommandGts2").click(function (e) {

            //

            $.ajax({

                url: '/Gts2/SPCCalcMoldGts2_CamstarReading',
                type: 'POST',
                datatype: 'json',
                data: JSON.stringify({ strLotNo: $("#strLotNoGts2").val() }),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    var lotNo = $("#strLotNoGts2").val();

                    $('#txtData').text(lotNo);

                    $.each(data, function (i, item) {

                        var itemName = item.WIPDataValue.toString();

                        var framepos = item.WIPDataPrompt.toString();

                        if (itemName.match(/\d+/g) && framepos.includes('Frame')) {
                            itemName;
                        }
                        else if (itemName.match(/\d+/g) && !framepos.includes('Frame')) {
                            itemName = parseFloat(itemName).toFixed(4);
                        }
                        else {
                            itemName;
                        }

                        $('#txtData').text($('#txtData').val() + "\n" + itemName);

                    }); // end of each loop

                } // end of success data

            });  // end ajax request

            $("#gridMoldGTS2").data('kendoGrid').dataSource.data([]);

            callWIPDataWindow(true);

            e.preventDefault();
        });

        $("#customCommandUA").click(function (e) {

            //

            $.ajax({

                url: '/UaMatrix/SPCCalcMoldSensor_CamstarReading',
                type: 'POST',
                datatype: 'json',
                data: JSON.stringify({ strLotNo: $("#strLotNoUA").val() }),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    var lotNo = $("#strLotNoUA").val();

                    $('#txtData').text(lotNo);

                    $.each(data, function (i, item) {

                        var itemName = item.WIPDataValue.toString();
                        var framepos = item.WIPDataPrompt.toString();

                        if (itemName.match(/\d+/g) && framepos.includes('Frame')) {
                            itemName;
                        }
                        else if (itemName.match(/\d+/g) && !framepos.includes('Frame')) {
                            if (framepos.includes('PkgWidth') || framepos.includes('PkgHeight') || framepos.includes('qXPlacement') || framepos.includes('rYPlacement')) {
                                itemName = parseFloat(itemName * 1000).toFixed(2);
                            }
                            else {
                                itemName = parseFloat(itemName).toFixed(4);
                            }

                        }
                        else {
                            itemName;
                        }

                        $('#txtData').text($('#txtData').val() + "\n" + itemName);

                    }); // end of each loop

                } // end of success data

            });  // end ajax request

            $("#gridMoldSENSOR").data('kendoGrid').dataSource.data([]);

            callWIPDataWindow(true);

            e.preventDefault();
        });

        $("#customCommandCS").click(function (e) {

            //

            $.ajax({

                url: '/CurrentSensor/SPCCalcMoldCS_CamstarReading',
                type: 'POST',
                datatype: 'json',
                data: JSON.stringify({ strLotNo: $("#strLotNoCS").val() }),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    var lotNo = $("#strLotNoCS").val();

                    $('#txtData').text(lotNo);

                    $.each(data, function (i, item) {

                        var itemName = item.WIPDataValue.toString();
                        var framepos = item.WIPDataPrompt.toString();

                        if (itemName.match(/\d+/g) && framepos.includes('Frame')) {
                            itemName;
                        }
                        else if (itemName.match(/\d+/g) && !framepos.includes('Frame')) {
                            //if (framepos.includes('PkgWidth') || framepos.includes('PkgHeight') || framepos.includes('PfssMisalign') || framepos.includes('PkgThickness')) {
                            //itemName = parseFloat(itemName * 1000).toFixed(2);
                            //}
                            //else {
                            itemName = parseFloat(itemName).toFixed(4);
                        }

                            //}
                        else {
                            itemName;
                        }

                        $('#txtData').text($('#txtData').val() + "\n" + itemName);

                    }); // end of each loop

                } // end of success data

            });  // end ajax request

            $("#gridMoldCS").data('kendoGrid').dataSource.data([]);

            callWIPDataWindow(true);

            e.preventDefault();
        });

        $("#customCommandSohed").click(function (e) {

            $.ajax({

                url: '/Sohed/SPCCalcMoldSohed_CamstarReading',
                type: 'POST',
                datatype: 'json',
                data: JSON.stringify({ strLotNo: $("#strLotNoSohed").val() }),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    var lotNo = $("#strLotNoSohed").val();

                    $('#txtData').text(lotNo);

                    $.each(data, function (i, item) {

                        var itemName = item.WIPDataValue.toString();
                        var framepos = item.WIPDataPrompt.toString();

                        if (itemName.match(/\d+/g) && framepos.includes('Frame')) {
                            itemName;
                        }
                        else if (itemName.match(/\d+/g) && !framepos.includes('Frame')) {

                            if (framepos.includes('jTBPO') || framepos.includes('kSSPFO') || framepos.includes('qPkgHeight') ||
                            framepos.includes('rPkgWidth') || framepos.includes('sPSSM') || framepos.includes('tPTBM') || framepos.includes('vPkgThickness')) {
                                itemName = parseFloat(itemName * 1000).toFixed(2);
                            }
                            else {
                                itemName = parseFloat(itemName).toFixed(4);
                            }

                        }
                        else {

                            itemName;
                        }

                        $('#txtData').text($('#txtData').val() + "\n" + itemName);

                    }); // end of each loop

                } // end of success data

            });  // end ajax request

            $("#gridMoldSohed").data('kendoGrid').dataSource.data([]);

            callWIPDataWindow(true);

            e.preventDefault();
        });


        $("#customCommandTOKTKN").click(function (e) {

            $.ajax({

                url: '/KMatrix/SPCCalcMoldKMatrix_CamstarReading',
                type: 'POST',
                datatype: 'json',
                data: JSON.stringify({ strLotNo: $("#strLotNoTOKTKN").val() }),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {

                    var lotNo = $("#strLotNoTOKTKN").val();

                    $('#txtData').text(lotNo);

                    $.each(data, function (i, item) {

                        var itemName = item.WIPDataValue.toString();
                        var framepos = item.WIPDataPrompt.toString();

                        if (itemName.match(/\d+/g) && framepos.includes('Frame')) {
                            itemName;
                        }
                        else if (itemName.match(/\d+/g) && !framepos.includes('Frame')) {
                            if (framepos.includes('PkgWidth') || framepos.includes('PkgHeight') || framepos.includes('qXPlacement') || framepos.includes('rYPlacement')) {
                                itemName = parseFloat(itemName * 1000).toFixed(2);
                            }
                            else {
                                itemName = parseFloat(itemName).toFixed(4);
                            }

                        }
                        else {
                            itemName;
                        }

                        $('#txtData').text($('#txtData').val() + "\n" + itemName);

                    }); // end of each loop

                } // end of success data

            });  // end ajax request

            $("#gridMoldKMATRIXTOKTKN").data('kendoGrid').dataSource.data([]);

            callWIPDataWindow(true);

            e.preventDefault();
        });


        function callWIPDataWindow(action) {

            var open = action;

            var winElement = $("#win").kendoWindow({
                width: 250,
                height: 700,
                visible: false,
                modal: true,
                resizable: false,
                title: "WIP Data Value"
            });

            if (open === true) {

                winElement.data("kendoWindow").center().open();

            }

            else {
                // close the messagebox

                winElement.data("kendoWindow").close();
            }

        }

        //------- Start Equipment DropDownList -----------------------------------------------------------------------------------------


        function onOpen() {
            kendoConsole.log("event: open");
        }

        function onClose() {
            kendoConsole.log("event: close");
        }

        function onChange() {
            kendoConsole.log("event: change");

            var grid = $("#gridMoldGTS").data("kendoGrid"),
                        model = grid.dataItem(this.element.closest("tr"));

            model.Machine = "changed";
            //alert($("#equipList").data("kendoDropDownList").text());
        }

        function onDataBound() {
            kendoConsole.log("event: dataBound");
        }

        function onFiltering() {
            kendoConsole.log("event: filtering");
        }

        function onSelect(e) {
            if ("kendoConsole" in window) {
                var dataItem = this.dataItem(e.item);
                kendoConsole.log("event :: select (" + dataItem.Text + " : " + dataItem.Value + ")");
            }
        }
        //------- End Equipment DropDownList-----------------------------------------------------------------------------------------

        //------- Start Employee DropDownList -----------------------------------------------------------------------------------------


        function onOpenEmp() {
            kendoConsole.log("event: open");
        }

        function onCloseEmp() {
            kendoConsole.log("event: close");
        }

        function onChangeEmp() {
            kendoConsole.log("event: change");
            //alert($("#empList").data("kendoDropDownList").text());
        }

        function onDataBoundEmp() {
            kendoConsole.log("event: dataBound");
        }

        function onFilteringEmp() {
            kendoConsole.log("event: filtering");
        }

        function onSelectEmp(e) {
            if ("kendoConsole" in window) {
                var dataItem = this.dataItem(e.item);
                kendoConsole.log("event :: select (" + dataItem.Text + " : " + dataItem.Value + ")");
            }
        }
        //------- End Employee DropDownList-----------------------------------------------------------------------------------------


        function navigateLikeExcel(gridName) {
            var grid = $(gridName).data("kendoGrid");

            grid.table.bind("keypress", function (e) {
                if (e.which !== 0 && e.charCode !== 0 && !e.ctrlKey && !e.metaKey && !e.altKey) {

                    //get currently navigated cell, this id follows user's navigation
                    var activeCell = $(gridName + "_active_cell");

                    //don't do anything if already editing cell
                    if (activeCell.hasClass("k-edit-cell")) return;

                    grid.editCell(activeCell);
                    var input = activeCell.find("input");

                    //number datatype editor loses key press character when entering edit
                    if (input.last().attr('data-type') === 'number') {
                        input.val(String.fromCharCode(e.keyCode | e.charCode));
                    } else {
                        input.val("");
                    }
                }
            });


            $(gridName + " table").on("keydown", "tr", function (e) {
                var code = (e.keyCode ? e.keyCode : e.which);
                if (code == 13) { //If key is ENTER
                    //find index of the td element
                    var tdIndex = $(e.target).closest('td').index();

                    //get the next row's cell
                    var nextRow = $(e.target).closest('tr').next();
                    var nextRowCell = $(nextRow).find('td:eq(' + tdIndex + ')');

                    //focus the next cell on a different context
                    setTimeout(function () {

                        var grid = $(gridName).data("kendoGrid");
                        grid.current(nextRowCell);

                        //                        nextRowCell.removeClass("k-state-selected");
                        nextRowCell.removeClass("k-state-focused");
                        //                        nextRowCell.addClass("k-state-selected");
                        nextRowCell.addClass("k-state-focused");
                    }, 0);
                }
            });
        }


        // Document Ready
        $(document).ready(function () {

            navigateLikeExcel("#gridMoldGTS");
            navigateLikeExcel("#gridMoldGTS2");
            navigateLikeExcel("#gridMoldSENSOR");
            navigateLikeExcel("#gridMoldKMATRIXTOKTKN");
            navigateLikeExcel("#gridMoldCS");
            navigateLikeExcel("#gridMoldSohed");
            navigateLikeExcel("#gridWbSohedBs");
            navigateLikeExcel("#gridWbSohedWp");
            navigateLikeExcel("#gridWbGtsBs");
            navigateLikeExcel("#gridWbGtsWp");

            // Initialize treeview object variables
            treeviewMain = $("#treeviewMenu").data("kendoTreeView");

            $("#gridMoldGTS .k-cancel").parent().remove();
            $("#gridMoldGTS2 .k-cancel").parent().remove();
            $("#gridMoldSENSOR .k-cancel").parent().remove();
            $("#gridWbSohedBs .k-cancel").parent().remove();
            $("#gridWbSohedWp .k-cancel").parent().remove();
            $("#gridWbGtsBs .k-cancel").parent().remove();
            $("#gridWbGtsWp .k-cancel").parent().remove();
            $("#gridMoldKMATRIXTOKTKN .k-cancel").parent().remove();

            $("#gridMoldCS .k-cancel").parent().remove();
            $("#gridMoldSohed .k-cancel").parent().remove();


            Date.prototype.format = function (format, utc) {
                return formatDate(this, format, utc);
            };

            // Resize splitter bars
            resizeSplitter();



            t_strip.hide();
            $("#welcomeNote").show();
            //            $("#tab1SpcMoldGts").hide();
            //            $("#tab1SpcMoldSensor").hide();
            //            $("#tab1SpcMoldKMatrixTOKTKN").hide();
            //            $("#tab1SpcMoldKMatrixKEKFKT").hide();
            //            $("#tab1SpcMoldCS").hide();
            //			$("#tab1SpcMoldSohed").hide();
            //            $("#tab1SpcWbSohed").hide();
            //            $("#tab1SpcWbGts").hide();

            //default selected
            $("#fullpath").html(treeviewMain.text(treeviewMain.select()));

            //computerName

            $("#computerName").html($("#compName").val());

        });  // end of .ready

    </script>


    <script src="../../Scripts/jquery.bpopup.min.js" type="text/javascript"></script>
    <script src="../../Scripts/jquery.ns-autogrow.min.js" type="text/javascript"></script>

    <!-- generic notification modal -->
    <div id="notification_modal"></div>
</body>
</html>